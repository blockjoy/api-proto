syntax = "proto3";

package v1;

// API token representation
// As there's no specific token type, we use this one to indicate the value of
// the field will be an API token
message ApiToken {
  string value = 1;
}

// Retrieve and refresh API token
service Authentication {
  // Login user, i.e. retrieve token
  rpc Login(LoginUserRequest) returns (LoginUserResponse);
  // Confirm user registration
  rpc Confirm(ConfirmRegistrationRequest) returns (ConfirmRegistrationResponse);
  // Refresh API token.
  rpc Refresh(RefreshTokenRequest) returns (RefreshTokenResponse);
  // Send the reset password email out to this user. Intentionally returns
  // nothing to hide whether the user was registered or not.
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
  // Update the user's password to a new value
  rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordResponse);
  // Update the user's password via profile UI
  rpc UpdateUIPassword(UpdateUIPasswordRequest)
    returns (UpdateUIPasswordResponse);
  // Switch active organization
  rpc SwitchOrganization(SwitchOrgRequest) returns (LoginUserResponse);
}

message LoginUserRequest {
  string email = 1;
  string password = 2;
}

message LoginUserResponse {
  ApiToken token = 1;
}

message RefreshTokenRequest {
}

message RefreshTokenResponse {
  ApiToken token = 1;
}

message ResetPasswordRequest {
  string email = 1;
}

message ResetPasswordResponse {
}

message UpdatePasswordRequest {
  string password = 1;
}

message UpdatePasswordResponse {
  ApiToken token = 1;
}

message UpdateUIPasswordRequest {
  string old_pwd = 1;
  string new_pwd = 2;
  string new_pwd_confirmation = 3;
}

message UpdateUIPasswordResponse {
  ApiToken token = 1;
}

message ConfirmRegistrationRequest {
}

message ConfirmRegistrationResponse {
  ApiToken token = 1;
}

message SwitchOrgRequest {
  string org_id = 1;
}
