syntax = "proto3";

package blockjoy.common.v1;

import "blockjoy/common/v1/firewall.proto";
import "blockjoy/common/v1/image.proto";

message BlockchainMetadata {
  // Blockchain image identifier.
  ImageIdentifier image = 1;
  // The Linux kernel version used in VM.
  string kernel = 2;
  // A description of the image.
  optional string description = 3;
  // Blockchain hardware requirements.
  HardwareRequirements requirements = 4;
  // Supported blockchain networks.
  map<string, NetworkConfig> networks = 5;
  // The minimum semver of the babel program that a script is compatible with.
  string min_babel_version = 6;
  // Babel agent configuration.
  BabelConfig babel_config = 7;
  // Node firewall configuration.
  FirewallConfig firewall = 8;
}

message HardwareRequirements {
  // Number of virtual cores in the VM.
  uint32 vcpu_count = 1;
  // RAM allocated to VM (in MB).
  uint64 mem_size_mb = 2;
  // Size of data drive for storing blockchain data (in GB).
  uint64 disk_size_gb = 3;
}

message NetworkConfig {
  // The name of this network config.
  string name = 1;
  // Url for given blockchain network.
  string url = 2;
  // Blockchain network type.
  NetType net_type = 3;
  // Custom network metadata.
  map<string, string> metadata = 4;
}

// The blockchain network type.
enum NetType {
  NET_TYPE_UNSPECIFIED = 0;
  NET_TYPE_DEV = 1;
  NET_TYPE_TEST = 2;
  NET_TYPE_MAIN = 3;
}

message BabelConfig {
  // Path to mount data drive to.
  string data_directory_mount_point = 1;
  // Log buffer capacity in lines.
  optional uint64 log_buffer_lines = 2;
  // Size of swap file created on the node (in MB).
  optional uint64 swap_size_mb = 3;
  // Location of swap file.
  optional string swap_file_location = 4;
  // RAM disks configuration.
  repeated RamdiskConfig ramdisks = 5;
}

message RamdiskConfig {
  // Path to mount RAM disk to.
  string ram_disk_mount_point = 1;
  // RAM disk size (in MB).
  uint64 ram_disk_size_mb = 2;
}
