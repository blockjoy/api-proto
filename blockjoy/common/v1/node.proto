syntax = "proto3";

package blockjoy.common.v1;

import "blockjoy/common/v1/resource.proto";
import "google/protobuf/timestamp.proto";

// The current status of a node.
message NodeStatus {
  NodeState state = 1;
  optional NextState next = 2;
  optional ProtocolStatus protocol = 3;
}

// The reported state of a node.
enum NodeState {
  NODE_STATE_UNSPECIFIED = 0;
  // The node is in the process of starting.
  NODE_STATE_STARTING = 1;
  // All processes are running on the node.
  NODE_STATE_RUNNING = 2;
  // The node has stopped cleanly.
  NODE_STATE_STOPPED = 3;
  // The node has stopped with an error.
  NODE_STATE_FAILED = 4;
  // The node is currently being upgraded.
  NODE_STATE_UPGRADING = 5;
  // The node is currently being deleted.
  NODE_STATE_DELETING = 6;
  // The node was deleted.
  NODE_STATE_DELETED = 7;
}

// The requested state for a node to transition to.
enum NextState {
  NEXT_STATE_UNSPECIFIED = 0;
  // A message was sent to stop the node.
  NEXT_STATE_STOPPING = 1;
  // A message was sent to delete the node.
  NEXT_STATE_DELETING = 2;
  // A message was sent to upgrade the node.
  NEXT_STATE_UPGRADING = 3;
}

// A protocol-specific status.
message ProtocolStatus {
  string state = 1;
  NodeHealth health = 2;
}

// The current health of a node.
enum NodeHealth {
  NODE_HEALTH_UNSPECIFIED = 0;
  NODE_HEALTH_HEALTHY = 1;
  NODE_HEALTH_NEUTRAL = 2;
  NODE_HEALTH_UNHEALTHY = 3;
}

// Determines how and where nodes are created.
message NodeLauncher {
  oneof launch {
    // Create nodes on these hosts.
    ByHost by_host = 1;
    // Create nodes in these regions.
    ByRegion by_region = 2;
  }
}

// Create nodes across multiple hosts.
message ByHost {
  repeated HostCount host_counts = 1;
}

// Create nodes on this host.
message HostCount {
  string host_id = 1;
  uint32 node_count = 2;
}

// Create nodes across multiple regions.
message ByRegion {
  repeated RegionCount region_counts = 1;
}

// Create nodes in this region.
message RegionCount {
  string region_id = 1;
  uint32 node_count = 2;
  optional ResourceAffinity resource = 3;
  optional SimilarNodeAffinity similarity = 4;
}

// Whether nodes will be scheduled on the most or least heavily utilized hosts.
enum ResourceAffinity {
  RESOURCE_AFFINITY_UNSPECIFIED = 0;
  // Prefer to utilize full hosts first.
  RESOURCE_AFFINITY_MOST_RESOURCES = 1;
  // Prefer to utilize empty hosts first.
  RESOURCE_AFFINITY_LEAST_RESOURCES = 2;
}

// Whether similar nodes will be placed on the same host or spread over many.
enum SimilarNodeAffinity {
  SIMILAR_NODE_AFFINITY_UNSPECIFIED = 0;
  // Schedule similar nodes on the same cluster (e.g. for low latency).
  SIMILAR_NODE_AFFINITY_CLUSTER = 1;
  // Avoid scheduling on hosts running similar nodes (e.g. for redundancy).
  SIMILAR_NODE_AFFINITY_SPREAD = 2;
}

// A job is an auxiliary process for a running node.
message NodeJob {
  // A name to identify this job by.
  string name = 1;
  // The current status of this job.
  NodeJobStatus status = 2;
  // The exit code of a stopped process.
  optional int32 exit_code = 3;
  // A readable message to manually inspect the state of the job.
  optional string message = 4;
  // A list of log lines with information about the current job.
  repeated string logs = 5;
  // The number of job restarts since the last reset.
  uint64 restarts = 6;
  // Additional info around the completion progress of this job.
  optional NodeJobProgress progress = 7;
}

// Flags describing a job possible states.
enum NodeJobStatus {
  NODE_JOB_STATUS_UNSPECIFIED = 0;
  // The job has not started yet.
  NODE_JOB_STATUS_PENDING = 1;
  // The job is current being executed.
  NODE_JOB_STATUS_RUNNING = 2;
  // The job has successfully finished.
  NODE_JOB_STATUS_FINISHED = 3;
  // The job has unsuccessfully finished.
  NODE_JOB_STATUS_FAILED = 4;
  // The job was interrupted.
  NODE_JOB_STATUS_STOPPED = 5;
}

// The progress a job has made towards completion.
message NodeJobProgress {
  // The total units of progress to complete.
  optional uint32 total = 1;
  // The units of progress currently completed.
  optional uint32 current = 2;
  // Additional info on the job progress.
  optional string message = 3;
}

message NodeReport {
  string report_id = 1;
  // The problem description.
  string message = 2;
  // The entity that created the report.
  blockjoy.common.v1.Resource created_by = 3;
  // The moment the issue was raised.
  google.protobuf.Timestamp created_at = 4;
}
