syntax = "proto3";

package blockjoy.api.ui_v1;

import "common.proto";
import "google/protobuf/empty.proto";

message FilterCriteria {
  repeated string states = 1;
  repeated string node_types = 2;
  repeated string blockchain_ids = 3;
}

// This message is used to create a new node.
message CreateNodeRequest {
  // Metadata about the request.
  RequestMeta meta = 1;

  // The id of the organization for which the node should be created.
  string org_id = 2;
  // The id of the blockchain that shoudl be ran inside the node.
  string blockchain_id = 3;
  // The version of the node software that is ran. If this is not provided, the
  // latest version is used.
  optional string version = 4;
  // The type of node that you want to create.
  Node.NodeType type = 5;
  // A list of properties.
  repeated Node.NodeProperty properties = 6;
  // The network that the blockchain will be a part of. Many blockchains have a
  // dedicated test network, such as "goerli" for ethereum.
  string network = 7;
}

// Message returned when a node is created.
message CreateNodeResponse {
  // Metadata about the response.
  ResponseMeta meta = 1;
  // The actual node that was just created.
  Node node = 2;
}

// This message is used to read info about a single node. For requests
// pertaining to multiple nodes, use `ListNodesRequest`.
message GetNodeRequest {
  // Metadata about the request.
  RequestMeta meta = 1;
  // This should be the UUID of the node that you want to query.
  string id = 2;
}

message GetNodeResponse {
  // Metadata about the response.
  ResponseMeta meta = 1;
  // The node that was queried will be placed in this field.
  Node node = 2;
}

// This request is used to query a set of nodes within an org by the parameters
// that are specified in the `filter` field.
message ListNodesRequest {
  // Metadata about the request.
  RequestMeta meta = 1;
  // The organization within which we will search for nodes.
  string org_id = 2;
  // The filter parameters that will be used for searching.
  FilterCriteria filter = 3;
}

// This response will contain all the filtered nodes.
message ListNodesResponse {
  // Metadata about the response.
  ResponseMeta meta = 1;
  // The nodes that match the filter will be placed in this field.
  repeated Node nodes = 2;
}

// This request is used for updating a node.
message UpdateNodeRequest {
  // Metadata about the request.
  RequestMeta meta = 1;
  
  // The UUID of the node that you want to update.
  string id = 2;
  // The version of the blockchain software that should now be ran on the node.
  optional string version = 3;
}

message UpdateNodeResponse {
  ResponseMeta meta = 1;
}

message DeleteNodeRequest {
  RequestMeta meta = 1;
  string id = 2;
}

service NodeService {
  /* Get single blockchain node */
  rpc Get(GetNodeRequest) returns (GetNodeResponse);
  /* Get nodes belonging to org */
  rpc List(ListNodesRequest) returns (ListNodesResponse);
  /* Create a single blockchain node */
  rpc Create(CreateNodeRequest) returns (CreateNodeResponse);
  /* Update a single blockchain node */
  rpc Update(UpdateNodeRequest) returns (UpdateNodeResponse);
  /* Delete a single node */
  rpc Delete(DeleteNodeRequest) returns (google.protobuf.Empty);
  /* TODO: FirewallConfiguration comes from v1 API node.proto */
  rpc FirewallConfiguration(google.protobuf.Empty) returns (FirewallConfiguration);
}
