syntax = "proto3";

package blockjoy.api.ui_v1;

import "common.proto";
import "google/protobuf/empty.proto";

message GetOrganizationsRequest {
  RequestMeta meta = 1;
  optional string org_id = 2;
}

message GetOrganizationsResponse {
  ResponseMeta meta = 1;
  repeated Organization organizations = 2;
}

message CreateOrganizationRequest {
  RequestMeta meta = 1;
  Organization organization = 2;
}

message CreateOrganizationResponse {
  ResponseMeta meta = 1;
  Organization organization = 2;
}

message UpdateOrganizationRequest {
  RequestMeta meta = 1;
  Organization organization = 2;
}

message UpdateOrganizationResponse {
  ResponseMeta meta = 1;
}

message DeleteOrganizationRequest {
  RequestMeta meta = 1;
  string id = 2;
}

message DeleteOrganizationResponse {
  ResponseMeta meta = 1;
}

message OrganizationMemberRequest {
  RequestMeta meta = 1;
  string id = 2;
}

message OrganizationMemberResponse {
  ResponseMeta meta = 1;
  repeated User users = 2;
}

message RestoreOrganizationRequest {
  RequestMeta meta = 1;
  string id = 2;
}

message RestoreOrganizationResponse {
  ResponseMeta meta = 1;
  Organization organization = 2;
}

message RemoveMemberRequest {
  RequestMeta meta = 1;
  string user_id = 2;
  string org_id = 3;
}

message LeaveOrganizationRequest {
  RequestMeta meta = 1;
  string org_id = 2;
}

/* Manage organizations */
service OrganizationService {
  /* Get all the organizations for a user. All users automatically get a
   * private (internal) organization 
   */
  rpc Get(GetOrganizationsRequest) returns (GetOrganizationsResponse);
  /* Create a single organization */
  rpc Create(CreateOrganizationRequest) returns (CreateOrganizationResponse);
  /* Update a single organization */
  rpc Update(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);
  /* Mark a single organization as deleted */
  rpc Delete(DeleteOrganizationRequest) returns (DeleteOrganizationResponse);
  /* Restore a previously deleted organization */
  rpc Restore(RestoreOrganizationRequest) returns (RestoreOrganizationResponse);
  /* Retrieve organization members */
  rpc Members(OrganizationMemberRequest) returns (OrganizationMemberResponse);
  /* Remove organization member */
  rpc RemoveMember(RemoveMemberRequest) returns (google.protobuf.Empty);
  /* Leave an organization the user is member of */
  rpc Leave(LeaveOrganizationRequest) returns (google.protobuf.Empty);
}
