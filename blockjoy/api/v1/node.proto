syntax = "proto3";

package blockjoy.api.v1;

import "google/protobuf/timestamp.proto";
import "messages.proto";

message NodeInfoUpdateRequest {
  optional string request_id = 1;
  NodeInfo info = 2;
}

message NodeInfo {
  // Possible states the container is described with
  enum ContainerStatus {
    // Reserving values up to 15 for possible later use
    // Up to 15 to ensure only 1 byte is used for the most common values
    reserved 12 to 15;

    CONTAINER_STATUS_UNSPECIFIED = 0;
    CONTAINER_STATUS_CREATING = 1;
    CONTAINER_STATUS_RUNNING = 2;
    CONTAINER_STATUS_STARTING = 3;
    CONTAINER_STATUS_STOPPING = 4;
    CONTAINER_STATUS_STOPPED = 5;
    CONTAINER_STATUS_UPGRADING = 6;
    CONTAINER_STATUS_UPGRADED = 7;
    CONTAINER_STATUS_DELETING = 8;
    CONTAINER_STATUS_DELETED = 9;
    CONTAINER_STATUS_INSTALLING = 10;
    CONTAINER_STATUS_SNAPSHOTTING = 11;
  }

  // Describe the node's staking status
  enum StakingStatus {
    // Reserving values up to 15 for possible later use
    // Up to 15 to ensure only 1 byte is used for the most common values
    reserved 7 to 15;

    STAKING_STATUS_UNKNOWNSTAKINGSTATUS_UNSPECIFIED = 0;
    STAKING_STATUS_FOLLOWER = 1;
    STAKING_STATUS_STAKED = 2;
    STAKING_STATUS_STAKING = 3;
    STAKING_STATUS_VALIDATING = 4;
    STAKING_STATUS_CONSENSUS = 5;
    STAKING_STATUS_UNSTAKED = 6;
  }

  // Describe the node's syncing status
  enum SyncStatus {
    // Reserving values up to 15 for possible later use
    // Up to 15 to ensure only 1 byte is used for the most common values
    reserved 3 to 15;

    SYNC_STATUS_UNSPECIFIED = 0;
    SYNC_STATUS_SYNCING = 1;
    SYNC_STATUS_SYNCED = 2;
  }

  // Describe the node's chain related status
  // Generic, NOT chain specific states. These states are used to describe the
  // node's states as seen by the blockchain. Babel is responsible for mapping
  // chain specific states to the one in here.
  enum ApplicationStatus {
    APPLICATION_STATUS_UNSPECIFIED = 0;
    // General chain states
    APPLICATION_STATUS_PROVISIONING = 1;
    APPLICATION_STATUS_BROADCASTING = 2;
    APPLICATION_STATUS_CANCELLED = 3;
    APPLICATION_STATUS_DELEGATING = 4;
    APPLICATION_STATUS_DELINQUENT = 5;
    APPLICATION_STATUS_DISABLED = 6;
    APPLICATION_STATUS_EARNING = 7;
    APPLICATION_STATUS_ELECTING = 8;
    APPLICATION_STATUS_ELECTED = 9;
    APPLICATION_STATUS_EXPORTED = 10;
    APPLICATION_STATUS_INGESTING = 11;
    APPLICATION_STATUS_MINING = 12;
    APPLICATION_STATUS_MINTING = 13;
    APPLICATION_STATUS_PROCESSING = 14;
    APPLICATION_STATUS_RELAYING = 15;
    APPLICATION_STATUS_REMOVED = 16;
    APPLICATION_STATUS_REMOVING = 17;
  }

  string id = 1;
  optional string name = 2;
  optional string ip = 3;
  optional bool self_update = 4;
  optional int64 block_height = 6;
  optional string onchain_name = 7;
  optional ApplicationStatus app_status = 8;
  optional ContainerStatus container_status = 9;
  optional SyncStatus sync_status = 10;
  optional StakingStatus staking_status = 11;
  optional string address = 12;
  optional string host_id = 13;
}

message NodeStart {
}

message NodeStop {
}

message NodeRestart {
}

message NodeUpgrade {
  ContainerImage image = 1;
}

message NodeInfoUpdate {
  optional string name = 1;
  optional bool self_update = 2;
  repeated Parameter properties = 3;
}

message NodeInfoGet {
}

message NodeGenericCommand {
  repeated Parameter params = 1;
}

message NodeCreate {
  string name = 1;
  string blockchain = 2;
  ContainerImage image = 3;
  string type = 4;
  string ip = 5;
  string gateway = 6;
  bool self_update = 7;
  repeated Parameter properties = 8;
  FirewallConfiguration firewall_config = 9;
}

message NodeDelete {
}

message NodeCommand {
  string node_id = 1;
  string api_command_id = 2;
  google.protobuf.Timestamp created_at = 3;
  string host_id = 13;

  oneof command {
    NodeGenericCommand generic = 4;
    NodeStart start = 5;
    NodeStop stop = 6;
    NodeRestart restart = 7;
    NodeUpgrade upgrade = 8;
    NodeInfoUpdate update = 9;
    NodeInfoGet info_get = 10;
    NodeCreate create = 11;
    NodeDelete delete = 12;
    NodeFirewallUpdate firewall_update = 14;
  };
}

enum Action {
  ACTION_UNSPECIFIED = 0;
  ACTION_ALLOW = 1;
  ACTION_DENY = 2;
  ACTION_REJECT = 3;
}

enum Direction {
  DIRECTION_UNSPECIFIED = 0;
  DIRECTION_OUT = 1;
  DIRECTION_IN = 2;
}

enum Protocol{
  PROTOCOL_UNSPECIFIED = 0;
  PROTOCOL_TCP = 1;
  PROTOCOL_UDP = 2;
  PROTOCOL_BOTH = 3;
}

message FirewallConfiguration {
  FallbackRule fallback = 1;
  repeated RuleSet rules = 2;
  // Use at your very own risk
  optional bool enabled = 3;
}

message FallbackRule {
  Action inbound = 1;
  Action outbound = 2;
}

message Rule {
  string name = 1;
  Action action = 2;
  Direction direction = 3;
  Protocol protocol = 4;
  optional string inbound_ips = 5;
  repeated uint32 ports = 6;
  optional bool enabled = 7;
}

message RuleSet {
  string id = 1;
  repeated Rule rules = 2;
  string org_id = 3;
}

// CRUD for a whole ruleset
message NodeFirewallUpdate {
  repeated RuleSet rules = 1;
  optional FallbackRule fallback = 2;
}

// CRUD for a single rule
message RuleUpdateRequest {
  string id = 1;
  repeated Rule rules = 2;
}
