syntax = "proto3";

package blockjoy.api.v1;

import "messages.proto";

message NodeInfo {
    // Possible states the container is described with
    enum ContainerStatus {
        // Reserving values up to 15 for possible later use
        // Up to 15 to ensure only 1 byte is used for the most common values
        reserved 12 to 15;

        UndefinedContainerStatus = 0;
        Creating = 1;
        Running = 2;
        Starting = 3;
        Stopping = 4;
        Stopped = 5;
        Upgrading = 6;
        Upgraded = 7;
        Deleting = 8;
        Deleted = 9;
        Installing = 10;
        Snapshotting = 11;
    }

    // Describe the node's syncing status
    enum SyncStatus {
        // Reserving values up to 15 for possible later use
        // Up to 15 to ensure only 1 byte is used for the most common values
        reserved 3 to 15;

        UndefinedSyncStatus = 0;
        Syncing = 1;
        Synced = 2;
    }

    // Describe the node's staking status
    enum StakingStatus {
        // Reserving values up to 15 for possible later use
        // Up to 15 to ensure only 1 byte is used for the most common values
        reserved 7 to 15;

        UnknownStakingStatus = 0;
        Follower = 1;
        Staked = 2;
        Staking = 3;
        Validating = 4;
        Consensus = 5;
        Unstaked = 6;
    }

    // Describe the node's chain related status
    // Generic, NOT chain specific states. These states are used to describe the
    // node's states as seen by the blockchain. Babel is responsible for mapping chain specific
    // states to the one in here
    enum ApplicationStatus {
        UndefinedApplicationStatus = 0;
        // General chain states
        Broadcasting = 1;
        Cancelled = 2;
        Delegating = 3;
        Delinquent = 4;
        Disabled = 5;
        Earning = 6;
        Electing = 7;
        Elected = 8;
        Exporting = 9;
        Ingesting = 10;
        Mining = 11;
        Minting = 12;
        Processing = 13;
        Relaying = 14;
        Removed = 15;
        Removing = 16;
    }

    Uuid id = 1;
    optional string name = 2;
    optional string ip = 3;
    optional int64 block_height = 6;
    optional string onchain_name = 7;
    optional ApplicationStatus app_status = 8;
    optional ContainerStatus container_status = 9;
    optional SyncStatus sync_status = 10;
    optional StakingStatus staking_status = 11;
}

message NodeStart {}

message NodeStop {}

message NodeRestart {}

message NodeUpgrade {
    ContainerImage image = 1;
}

message NodeInfoUpdate {
    optional string name = 1;
}

message NodeInfoGet {}

message NodeGenericCommand {
    repeated Parameter params = 1;
}

message NodeCreate {
    string name = 1;
    string blockchain = 2;
    ContainerImage image = 3;
    NodeType type = 4;
}

message NodeDelete {}

message NodeCommand {
    Uuid id = 1;
    CommandMeta meta = 2;

    oneof command {
        NodeGenericCommand generic = 3;
        NodeStart start = 4;
        NodeStop stop = 5;
        NodeRestart restart = 6;
        NodeUpgrade upgrade = 7;
        NodeInfoUpdate update = 8;
        NodeInfoGet info_get = 9;
        NodeCreate create = 10;
        NodeDelete delete = 11;
    };
}
