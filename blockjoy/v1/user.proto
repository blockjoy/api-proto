syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/search.proto";
import "google/protobuf/timestamp.proto";

// User representation.
message User {
  string id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
  google.protobuf.Timestamp created_at = 5;
}

// User related services.
service UserService {
  // Retrieve a single user.
  rpc Get(UserServiceGetRequest) returns (UserServiceGetResponse);
  // Retrieve multiple users my means of a filter.
  rpc List(UserServiceListRequest) returns (UserServiceListResponse);
  // Create a single user.
  rpc Create(UserServiceCreateRequest) returns (UserServiceCreateResponse);
  // Update a single user.
  rpc Update(UserServiceUpdateRequest) returns (UserServiceUpdateResponse);
  // Delete a single user.
  rpc Delete(UserServiceDeleteRequest) returns (UserServiceDeleteResponse);
  // Retrieve the billing details of this user.
  rpc GetBilling(UserServiceGetBillingRequest) returns (UserServiceGetBillingResponse);
  // Overwrite the billing details of this user.
  rpc UpdateBilling(UserServiceUpdateBillingRequest) returns (UserServiceUpdateBillingResponse);
  // Remove the billing details of this user.
  rpc DeleteBilling(UserServiceDeleteBillingRequest) returns (UserServiceDeleteBillingResponse);

  // Retrieve the `settings` for this user. This is a string -> string map that
  // may be used by frontends to communicate those settings that are not used by
  // the backend in between sessions and devices. This field is free-form and
  // ignored by the backend.
  rpc GetSettings(UserServiceGetSettingsRequest) returns (UserServiceGetSettingsResponse);
  // Modify a setting for this user.
  rpc UpdateSettings(UserServiceUpdateSettingsRequest) returns (UserServiceUpdateSettingsResponse);
  // Reset delete a setting for this user.
  rpc DeleteSettings(UserServiceDeleteSettingsRequest) returns (UserServiceDeleteSettingsResponse);
}

message UserServiceGetRequest {
  string id = 1;
}

message UserServiceGetResponse {
  User user = 1;
}

message UserServiceListRequest {
  // Return only users from this org. This is required for users that do not
  // have access to the entire system (i.e. blockjoy's admins).
  optional string org_id = 1;
  // The number of items to be skipped over.
  uint64 offset = 3;
  // The number of items that will be returned. Together with offset, you can
  // use this to get pagination.
  uint64 limit = 4;
  // Search params.
  optional UserSearch search = 5;
  // The field sorting order of results.
  repeated UserSort sort = 6;
}

// This message contains fields used to search organizations as opposed to just
// filtering them.
message UserSearch {
  // The way the search parameters should be combined.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search only the id.
  optional string id = 2;
  // Return only users whose email has the provided pattern as a substring. Note
  // that this search is not case sensitive. The wildcard symbol here is `'%'`.
  // For example, a query for all users whose email starts with `baremetal`
  // would look like `"baremetal%"`.
  optional string email = 3;
  // Search only the full name.
  optional string name = 4;
}

message UserSort {
  UserSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum UserSortField {
  USER_SORT_FIELD_UNSPECIFIED = 0;
  USER_SORT_FIELD_EMAIL = 1;
  USER_SORT_FIELD_FIRST_NAME = 2;
  USER_SORT_FIELD_LAST_NAME = 3;
  USER_SORT_FIELD_CREATED_AT = 4;
}

message UserServiceListResponse {
  repeated User users = 1;
  // The total number of users matching your query.
  uint64 user_count = 2;
}

message UserServiceCreateRequest {
  string email = 1;
  string first_name = 2;
  string last_name = 3;
  string password = 4;
}

message UserServiceCreateResponse {
  User user = 1;
}

message UserServiceUpdateRequest {
  // The id of the user to be updated.
  string id = 1;
  optional string first_name = 2;
  optional string last_name = 3;
}

message UserServiceUpdateResponse {
  User user = 1;
}

message UserServiceDeleteRequest {
  string id = 1;
}

message UserServiceDeleteResponse {}

message UserServiceGetBillingRequest {
  string user_id = 1;
}

message UserServiceGetBillingResponse {
  optional string billing_id = 1;
}

message UserServiceUpdateBillingRequest {
  string user_id = 1;
  optional string billing_id = 2;
}

message UserServiceUpdateBillingResponse {
  optional string billing_id = 1;
}

message UserServiceDeleteBillingRequest {
  string user_id = 1;
}

message UserServiceDeleteBillingResponse {}

message UserServiceGetSettingsRequest {
  // The id of the user for which to return the settings.
  string user_id = 1;
}

message UserServiceGetSettingsResponse {
  map<string, bytes> settings = 1;
}

message UserServiceUpdateSettingsRequest {
  string user_id = 1;
  string name = 2;
  bytes value = 3;
}

message UserServiceUpdateSettingsResponse {
  string name = 1;
  bytes value = 2;
}

message UserServiceDeleteSettingsRequest {
  string user_id = 1;
  string name = 2;
}

message UserServiceDeleteSettingsResponse {}
