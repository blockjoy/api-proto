syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/config.proto";
import "blockjoy/common/v1/node.proto";
import "blockjoy/common/v1/protocol.proto";
import "blockjoy/common/v1/resource.proto";
import "blockjoy/common/v1/search.proto";
import "blockjoy/common/v1/tag.proto";
import "google/protobuf/timestamp.proto";

message Node {
  string node_id = 1;
  string org_id = 2;
  string org_name = 3;
  string node_name = 4;
  optional string display_name = 5;
  optional string old_node_id = 6;
  string image_id = 7;
  string config_id = 8;
  blockjoy.common.v1.NodeConfig config = 9;
  string host_id = 10;
  optional string host_org_id = 11;
  string host_network_name = 12;
  optional string host_display_name = 13;
  string protocol_id = 14;
  string protocol_name = 15;
  string protocol_version_id = 16;
  blockjoy.common.v1.ProtocolVersionKey version_key = 17;
  string semantic_version = 18;
  bool auto_upgrade = 19;
  string ip_address = 20;
  string ip_gateway = 21;
  string dns_name = 22;
  optional string p2p_address = 23;
  optional string dns_url = 24;
  optional uint64 block_height = 25;
  optional uint64 block_age = 26;
  optional string note = 27;
  blockjoy.common.v1.NodePlacement placement = 28;
  blockjoy.common.v1.NodeStatus node_status = 29;
  repeated blockjoy.common.v1.NodeJob jobs = 30;
  repeated blockjoy.common.v1.NodeReport reports = 31;
  blockjoy.common.v1.Tags tags = 32;
  blockjoy.common.v1.Resource created_by = 33;
  google.protobuf.Timestamp created_at = 34;
  google.protobuf.Timestamp updated_at = 35;
}

// Service for interacting with a node.
service NodeService {
  // Create a new node.
  rpc Create(NodeServiceCreateRequest) returns (NodeServiceCreateResponse);
  // Get details for a node.
  rpc Get(NodeServiceGetRequest) returns (NodeServiceGetResponse);
  // List all nodes belonging to an org.
  rpc List(NodeServiceListRequest) returns (NodeServiceListResponse);
  // Report the current status of a node.
  rpc ReportStatus(NodeServiceReportStatusRequest) returns (NodeServiceReportStatusResponse);
  // Report an error about this node.
  rpc ReportError(NodeServiceReportErrorRequest) returns (NodeServiceReportErrorResponse);
  // Update a node configuration.
  rpc UpdateConfig(NodeServiceUpdateConfigRequest) returns (NodeServiceUpdateConfigResponse);
  // Upgrade a node to a new image.
  rpc UpgradeImage(NodeServiceUpgradeImageRequest) returns (NodeServiceUpgradeImageResponse);
  // Start a node.
  rpc Start(NodeServiceStartRequest) returns (NodeServiceStartResponse);
  // Stop a node.
  rpc Stop(NodeServiceStopRequest) returns (NodeServiceStopResponse);
  // Restart a node.
  rpc Restart(NodeServiceRestartRequest) returns (NodeServiceRestartResponse);
  // Delete a node.
  rpc Delete(NodeServiceDeleteRequest) returns (NodeServiceDeleteResponse);
}

// Create a new node for some image.
message NodeServiceCreateRequest {
  // The org id that is creating the node.
  string org_id = 1;
  // The image id of the node to create.
  string image_id = 2;
  // Recreate a new node with the config from an existing one.
  optional string old_node_id = 3;
  // How to determine the host placment of the new node.
  blockjoy.common.v1.NodePlacement placement = 4;
  // The image properties changed from their default values.
  repeated blockjoy.common.v1.ImagePropertyValue new_values = 5;
  // Additional firewall rules to add to the node.
  repeated blockjoy.common.v1.FirewallRule add_rules = 6;
  // A list of tags that are attached to this node.
  optional blockjoy.common.v1.Tags tags = 7;
}

message NodeServiceCreateResponse {
  repeated Node nodes = 1;
}

message NodeServiceGetRequest {
  string node_id = 1;
  string org_id = 2;
}

message NodeServiceGetResponse {
  Node node = 1;
}

// Query a set of nodes within an org.
message NodeServiceListRequest {
  // The orgs to list nodes for (or empty for all).
  repeated string org_ids = 1;
  // The number of results to skip.
  uint64 offset = 2;
  // Limit the number of results.
  uint64 limit = 3;
  // Search these parameters.
  optional NodeSearch search = 4;
  // Sort the results in this order.
  repeated NodeSort sort = 5;
  // If non-empty, only return nodes for these protocol ids.
  repeated string protocol_ids = 6;
  // If non-empty, only return nodes running on these hosts.
  repeated string host_ids = 7;
  // If non-empty, only return nodes created by these user ids.
  repeated string user_ids = 8;
  // If non-empty, only return nodes with these ip addresses.
  repeated string ip_addresses = 9;
  // If non-empty, only return nodes in these states.
  repeated blockjoy.common.v1.NodeState node_states = 10;
  // If non-empty, only return nodes with these next states.
  repeated blockjoy.common.v1.NextState next_states = 11;
  // If non-empty, only return nodes with these semantic versions.
  repeated string semantic_versions = 12;
}

// The fields used to search nodes rather than just filtering them.
message NodeSearch {
  // How to combine the parameters.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search for the node id.
  optional string node_id = 2;
  // Search for the node org id.
  optional string org_id = 3;
  // Search for the node name.
  optional string node_name = 4;
  // Search for the display name.
  optional string display_name = 5;
  // Search for the DNS name.
  optional string dns_name = 6;
  // Search for the node state.
  optional blockjoy.common.v1.NodeState node_state = 7;
  // Search for the next state.
  optional blockjoy.common.v1.NextState next_state = 8;
  // Search for the protocol state.
  optional string protocol_state = 9;
  // Search for the protocol health.
  optional string protocol_health = 10;
  // Search for the node ip address.
  optional string ip = 11;
}

message NodeSort {
  NodeSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum NodeSortField {
  NODE_SORT_FIELD_UNSPECIFIED = 0;
  NODE_SORT_FIELD_NODE_NAME = 1;
  NODE_SORT_FIELD_DNS_NAME = 2;
  NODE_SORT_FIELD_DISPLAY_NAME = 3;
  NODE_SORT_FIELD_NODE_STATE = 4;
  NODE_SORT_FIELD_NEXT_STATE = 5;
  NODE_SORT_FIELD_PROTOCOL_STATE = 6;
  NODE_SORT_FIELD_PROTOCOL_HEALTH = 7;
  NODE_SORT_FIELD_BLOCK_HEIGHT = 8;
  NODE_SORT_FIELD_CREATED_AT = 9;
  NODE_SORT_FIELD_UPDATED_AT = 10;
}

// This response contains the filtered nodes.
message NodeServiceListResponse {
  repeated Node nodes = 1;
}

// Report the current status of a node.
message NodeServiceReportStatusRequest {
  // The id of the node to report.
  string node_id = 1;
  // The org id of the node.
  string org_id = 2;
  // The running config of the node.
  string config_id = 3;
  // Update the node status.
  optional blockjoy.common.v1.NodeStatus status = 4;
  // Update the peer-to-peer address.
  optional string p2p_address = 5;
}

message NodeServiceReportStatusResponse {}

// Report an error with the node.
message NodeServiceReportErrorRequest {
  // The id of the node to report on.
  string node_id = 1;
  // The org id of the node.
  string org_id = 2;
  // An error description of the problem.
  string message = 3;
}

message NodeServiceReportErrorResponse {
  string report_id = 1;
}

message NodeServiceUpdateConfigRequest {
  // The id of the node to update.
  string node_id = 1;
  // The org id of the node.
  string org_id = 2;
  // Whether the node should automatically be upgraded.
  optional bool auto_upgrade = 3;
  // Move this node to a new org.
  optional string new_org_id = 4;
  // Update the display name of this node.
  optional string new_display_name = 5;
  // Update the note that explains what this node is for.
  optional string new_note = 6;
  // Update these property keys to these values.
  repeated blockjoy.common.v1.ImagePropertyValue new_values = 7;
  // Replace the firewall config with a new one.
  optional blockjoy.common.v1.FirewallConfig new_firewall = 8;
  // Update the node tags.
  optional blockjoy.common.v1.UpdateTags update_tags = 9;
}

message NodeServiceUpdateConfigResponse {}

message NodeServiceUpgradeImageRequest {
  // The ids of the nodes to upgrade.
  repeated string node_ids = 1;
  // The org ids of the nodes to upgrade.
  repeated string org_ids = 2;
  // The image_id to upgrade the nodes to.
  string image_id = 3;
  // The org id of a private image.
  optional string image_org_id = 4;
}

message NodeServiceUpgradeImageResponse {}

message NodeServiceStartRequest {
  string node_id = 1;
  string org_id = 2;
}

message NodeServiceStartResponse {}

message NodeServiceStopRequest {
  string node_id = 1;
  string org_id = 2;
}

message NodeServiceStopResponse {}

message NodeServiceRestartRequest {
  string node_id = 1;
  string org_id = 2;
}

message NodeServiceRestartResponse {}

message NodeServiceDeleteRequest {
  string node_id = 1;
  string org_id = 2;
}

message NodeServiceDeleteResponse {}
