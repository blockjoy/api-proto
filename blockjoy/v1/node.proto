syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/node.proto";
import "blockjoy/common/v1/resource.proto";
import "blockjoy/common/v1/search.proto";
import "google/protobuf/timestamp.proto";

// Blockchain node representation
message Node {
  string id = 1;
  string org_id = 2;
  string org_name = 3;
  string host_id = 4;
  string host_name = 5;
  string host_org_id = 6;
  string blockchain_id = 7;
  string blockchain_name = 8;
  string name = 9;
  // The P2P address of the node on the blockchain. This field is only set as
  // the node is started, so therefore it is optional.
  optional string address = 10;
  string version = 11;
  string ip = 12;
  blockjoy.common.v1.NodeType node_type = 13;
  repeated NodeProperty properties = 14;
  optional uint64 block_height = 15;
  google.protobuf.Timestamp created_at = 16;
  google.protobuf.Timestamp updated_at = 17;
  blockjoy.common.v1.NodeStatus status = 18;
  blockjoy.common.v1.SyncStatus sync_status = 19;
  blockjoy.common.v1.ContainerStatus container_status = 20;
  optional blockjoy.common.v1.StakingStatus staking_status = 21;
  string ip_gateway = 22;
  bool self_update = 23;
  string network = 24;
  blockjoy.common.v1.EntityUpdate created_by = 25;
  // A list of ip addresses allowed to access public ports on this node.
  repeated FilteredIpAddr allow_ips = 28;
  // A list of ip addresses denied all access to any ports on this node.
  repeated FilteredIpAddr deny_ips = 29;
  // Logic with regards to where the node should placed.
  NodePlacement placement = 30;
  // The place where the blockchain data directory should be mounted on the
  // host.
  optional string data_directory_mountpoint = 31;
  // The running node on the host will consist of a couple of processes. These
  // may individually start, stop and fail.
  repeated NodeJob jobs = 33;
  // A list of reports that have been created for this node.
  repeated NodeReport reports = 34;
}

// Service for interacting with a node.
service NodeService {
  // Create a single blockchain node.
  rpc Create(NodeServiceCreateRequest) returns (NodeServiceCreateResponse);
  // Get single blockchain node.
  rpc Get(NodeServiceGetRequest) returns (NodeServiceGetResponse);
  // Get nodes belonging to org.
  rpc List(NodeServiceListRequest) returns (NodeServiceListResponse);
  // Update a single blockchain node configuration.
  rpc UpdateConfig(NodeServiceUpdateConfigRequest) returns (NodeServiceUpdateConfigResponse);
  // Update a single blockchain node status.
  rpc UpdateStatus(NodeServiceUpdateStatusRequest) returns (NodeServiceUpdateStatusResponse);
  // Start a single node.
  rpc Start(NodeServiceStartRequest) returns (NodeServiceStartResponse);
  // Stop a single node.
  rpc Stop(NodeServiceStopRequest) returns (NodeServiceStopResponse);
  // Restart a single node.
  rpc Restart(NodeServiceRestartRequest) returns (NodeServiceRestartResponse);
  // Delete a single node.
  rpc Delete(NodeServiceDeleteRequest) returns (NodeServiceDeleteResponse);
  // Create an error report about this host.
  rpc Report(NodeServiceReportRequest) returns (NodeServiceReportResponse);
}

// This message is used to create a new node.
message NodeServiceCreateRequest {
  // The id of the organization for which the node should be created.
  string org_id = 2;
  // The id of the blockchain that should be ran inside the node.
  string blockchain_id = 3;
  // The version of the node software that is ran.
  string version = 4;
  // The type of node that you want to create.
  blockjoy.common.v1.NodeType node_type = 5;
  // A list of properties.
  repeated NodeProperty properties = 6;
  // The network that the blockchain will be a part of. Many blockchains have a
  // dedicated test network, such as "goerli" for ethereum.
  string network = 7;
  // Logic with regards to where the node should placed.
  NodePlacement placement = 8;
  // A list of ip addresses allowed to access public ports on this node.
  repeated FilteredIpAddr allow_ips = 9;
  // A list of ip addresses denied all access to any ports on this node.
  repeated FilteredIpAddr deny_ips = 10;
}

// Message returned when a node is created.
message NodeServiceCreateResponse {
  // The actual node that was just created.
  Node node = 1;
}

// This message is used to read info about a single node. For requests
// pertaining to multiple nodes, use `NodeServiceListRequest`.
message NodeServiceGetRequest {
  // This should be the UUID of the node that you want to query.
  string id = 1;
}

message NodeServiceGetResponse {
  // The node that was queried will be placed in this field.
  Node node = 1;
}

// This request is used to query a set of nodes within an org by the parameters
// that are specified in the `filter` field.
message NodeServiceListRequest {
  // The organizations within which we will search for nodes.
  repeated string org_ids = 1;
  // The number of items to be skipped over.
  uint64 offset = 2;
  // The number of items that will be returned. Together with offset, you can
  // use this to get pagination.
  uint64 limit = 3;
  // If this list is non-empty, only nodes that are any of these states will be
  // returned.
  repeated blockjoy.common.v1.NodeStatus statuses = 4;
  // If this list is non-empty, only nodes of any of these types will be
  // returned.
  repeated blockjoy.common.v1.NodeType node_types = 5;
  // If this list is non-empty, only nodes that run a blockchain identified by
  // any of these blockchain ids will be returned.
  repeated string blockchain_ids = 6;
  // If this value is provided, only nodes running on these hosts are returned.
  repeated string host_ids = 7;
  // If this value is provided, only nodes created by these users are returned.
  repeated string user_ids = 10;
  // If this value is provided, only nodes with these ip addresses are returned.
  repeated string ip_addresses = 11;
  // If this value is provided, only nodes with these versions are returned.
  repeated string versions = 12;
  // If this value is provided, only nodes with these networks are returned.
  repeated string networks = 13;
  // If this value is provided, only nodes with these regions are returned.
  repeated string regions = 14;
  // Search params.
  optional NodeSearch search = 8;
  // The field sorting order of results.
  repeated NodeSort sort = 9;
}

// This message contains fields used to search nodes as opposed to just
// filtering them.
message NodeSearch {
  // The way the search parameters should be combined.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search only the name.
  optional string id = 2;
  // Search only the name.
  optional string name = 3;
  // Search only the ip address.
  optional string ip = 4;
}

message NodeSort {
  NodeSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum NodeSortField {
  NODE_SORT_FIELD_UNSPECIFIED = 0;
  NODE_SORT_FIELD_HOST_NAME = 1;
  NODE_SORT_FIELD_NODE_NAME = 2;
  NODE_SORT_FIELD_NODE_TYPE = 3;
  NODE_SORT_FIELD_CREATED_AT = 4;
  NODE_SORT_FIELD_UPDATED_AT = 5;
  NODE_SORT_FIELD_NODE_STATUS = 6;
  NODE_SORT_FIELD_SYNC_STATUS = 7;
  NODE_SORT_FIELD_CONTAINER_STATUS = 8;
  NODE_SORT_FIELD_STAKING_STATUS = 9;
}

// This response will contain all the filtered nodes.
message NodeServiceListResponse {
  // The nodes that match the filter will be placed in this field.
  repeated Node nodes = 1;
  // The total number of nodes matching your query.
  uint64 node_count = 2;
}

// This request is used for updating a node configuration.
message NodeServiceUpdateConfigRequest {
  // The UUID of the node that you want to update.
  string id = 1;
  // Whether or not the node software should update itself.
  optional bool self_update = 2;
  // A list of ip addresses allowed to access public ports on this node.
  repeated FilteredIpAddr allow_ips = 3;
  // A list of ip addresses denied all access to any ports on this node.
  repeated FilteredIpAddr deny_ips = 4;
  // If this field is specified, then the node is moved to this org.
  optional string org_id = 5;
}

message NodeServiceUpdateConfigResponse {}

// This request is used for updating a node status.
message NodeServiceUpdateStatusRequest {
  // The UUID of the node that you want to update.
  string id = 1;
  // The version of the node image that is currently used.
  optional string version = 2;
  // Set the container status field to this value.
  optional blockjoy.common.v1.ContainerStatus container_status = 3;
  // Update the P2P address of the blockchain node.
  optional string address = 4;
}

message NodeServiceUpdateStatusResponse {}

message NodeServiceReportRequest {
  // The id of the user that created the report.
  string user_id = 1;
  // The id of the node that this report pertains to.
  string node_id = 2;
  // An error description of the problem.
  string message = 3;
}

message NodeServiceReportResponse {
  string id = 1;
}

message NodeServiceStartRequest {
  string id = 1;
}

message NodeServiceStartResponse {}

message NodeServiceStopRequest {
  string id = 1;
}

message NodeServiceStopResponse {}

message NodeServiceRestartRequest {
  string id = 1;
}

message NodeServiceRestartResponse {}

message NodeServiceDeleteRequest {
  string id = 1;
}

message NodeServiceDeleteResponse {}

// This message contains the two possible ways in which the location of a node
// may be determined.
message NodePlacement {
  oneof placement {
    // Simply place the node on the provided host id. This means that retrying
    // on another host is disabled.
    string host_id = 1;
    // The scheduler decides where to place this node. Refer to the
    // documentation of the `NodeScheduler` message for more details.
    NodeScheduler scheduler = 2;
  }
}

// A node scheduler controls the way that the node is placed onto an appropriate
// host. There are two fields, each representing a possible method of selecting
// a host for this node to be scheduled on. They are sorted by priority in
// descending order, meaning that `similarity` takes precedence over `resource`.
// The first field is required, in order to make sure that the way we schedule a
// node is always defined.
message NodeScheduler {
  // Controls whether or not nodes of a similar type will be placed on the same
  // host or, conversely, be spread out over many hosts. "Similar" is defined
  // here as having the name `node_type`, `blockchain_id` and `org_id`. Note
  // that `version` is ignored here, so that we don't interfere with clustering
  // during when some of the nodes are upgraded, but others aren't yet.
  enum SimilarNodeAffinity {
    SIMILAR_NODE_AFFINITY_UNSPECIFIED = 0;
    // Schedule nodes similar on the same host machine. This is useful for nodes
    // that form groups with heavy intercommunication. Placing them on the same
    // host machine will ensure the lowest possible network latency between
    // them.
    SIMILAR_NODE_AFFINITY_CLUSTER = 1;
    // Avoid scheduling nodes on hosts that already have a similar node running
    // on them. This is useful when multiple nodes are ran in parallel for the
    // sake of redundancy. Spreading the nodes ensures that one host going down
    // does not compromise other nodes.
    SIMILAR_NODE_AFFINITY_SPREAD = 2;
  }

  // Controls whether nodes will prefer to be scheduled on the most utilized or
  // the least utilized hosts first. This allows you to do breadth- or depth-
  // first utilization of the available hosts.
  enum ResourceAffinity {
    RESOURCE_AFFINITY_UNSPECIFIED = 0;
    // Prefer to utilize full hosts first.
    RESOURCE_AFFINITY_MOST_RESOURCES = 1;
    // Prefer to utilize empty hosts first.
    RESOURCE_AFFINITY_LEAST_RESOURCES = 2;
  }
  // The way we want the node to react to hosts being full or empty.
  ResourceAffinity resource = 1;
  // The way we want the node to react to similar nodes being on a host.
  optional SimilarNodeAffinity similarity = 2;
  // The region where the node should be ran.
  string region = 3;
}

// IP Addresses used to filter access.
message FilteredIpAddr {
  // The ip address used in this filter.
  string ip = 1;
  // A user's description of what/why this address is being filtered.
  optional string description = 2;
}

message NodeProperty {
  string name = 1;
  string display_name = 6;
  blockjoy.common.v1.UiType ui_type = 2;
  bool disabled = 3;
  bool required = 4;
  string value = 5;
}

// A job is a process running on the host that is necessary for the operation of
// a node. Examples here are downloading the chain data or running the
// blockchain node process.
message NodeJob {
  // A name to identify this job by.
  string name = 1;
  // The status this job is currently in.
  NodeJobStatus status = 2;
  // If the process exited, then this field holds the unix-style exit code.
  optional int32 exit_code = 3;
  // A displayable message that the user might be able to read in order to
  // further identify the current status of the job. For example, if the job has
  // failed, an error message might be place here.
  optional string message = 4;
  // A list of log lines with information about the current job.
  repeated string logs = 5;
  // This field contains the number of restarts that as happened since the last
  // cut-off. This is _not_ guaranteed to be the number of restarts that has
  // happened since the creation of this node. Rather, this number may be reset
  // to zero periodically, or whenever the job triggers the state `FINISHED`.
  uint64 restarts = 6;
  // This message contains a couple of fields that together denote the progress
  // towards completion of this job.
  optional NodeJobProgress progress = 7;
}

// Flags describing a job possible states.
enum NodeJobStatus {
  NODE_JOB_STATUS_UNSPECIFIED = 0;
  // The job has not started yet.
  NODE_JOB_STATUS_PENDING = 1;
  // The job is current being executed.
  NODE_JOB_STATUS_RUNNING = 2;
  // The job has successfully finished.
  NODE_JOB_STATUS_FINISHED = 3;
  // The job has unsuccessfully finished.
  NODE_JOB_STATUS_FAILED = 4;
  // The job was interrupted.
  NODE_JOB_STATUS_STOPPED = 5;
}

// This message indicates the amount of progress a job has made towards its
// completion. Note that it is possible for a job to report an amount of
// progress without it also providing a total.
message NodeJobProgress {
  // The total units of progress that need to be made in order to complete this
  // job.
  optional uint32 total = 1;
  // The amount of units of progress that have been made towards the completion
  // of this job.
  optional uint32 current = 2;
  // Any sort of message that is included with this job,
  optional string message = 3;
}

message NodeReport {
  string id = 1;
  // The problem description.
  string message = 2;
  // The entity that created the report.
  blockjoy.common.v1.EntityUpdate created_by = 3;
  // The moment the issue was raised.
  google.protobuf.Timestamp created_at = 4;
}
