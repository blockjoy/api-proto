syntax = "proto3";

package blockjoy.v1;

import "blockjoy/v1/node.proto";
import "google/protobuf/timestamp.proto";

message Blockchain {
  string id = 1;
  string name = 2;
  string description = 3;
  BlockchainStatus status = 4;
  optional string project_url = 5;
  optional string repo_url = 6;
  optional string version = 7;
  google.protobuf.Timestamp created_at = 8;
  optional google.protobuf.Timestamp updated_at = 9;
  // This list contains all the possible node types that can be created for this
  // kind of blockchain.
  repeated SupportedNodeType nodes_types = 10;
  repeated BlockchainNetwork networks = 11;
}

// Blockchain related service.
service BlockchainService {
  // Returns a single blockchain as identified by its id.
  rpc Get(BlockchainServiceGetRequest) returns (BlockchainServiceGetResponse);
  // Returns a list of all blockchains.
  rpc List(BlockchainServiceListRequest) returns
    (BlockchainServiceListResponse);
}

message BlockchainServiceGetRequest {
  string id = 1;
}

message BlockchainServiceGetResponse {
  Blockchain blockchain = 1;
}

message BlockchainServiceListRequest {
}

message BlockchainServiceListResponse {
  repeated Blockchain blockchains = 1;
}

enum BlockchainStatus {
  BLOCKCHAIN_STATUS_UNSPECIFIED = 0;
  BLOCKCHAIN_STATUS_DEVELOPMENT = 1;
  BLOCKCHAIN_STATUS_ALPHA = 2;
  BLOCKCHAIN_STATUS_BETA = 3;
  BLOCKCHAIN_STATUS_PRODUCTION = 4;
  BLOCKCHAIN_STATUS_DELETED = 5;
}

message SupportedNodeType {
  NodeType node_type = 1;
  string version = 2;
  repeated SupportedNodeProperty properties = 3;
}

message SupportedNodeProperty {
  string name = 1;
  optional string default = 2;
  UiType ui_type = 3;
  bool disabled = 4;
  bool required = 5;
}

enum BlockchainNetworkType {
  BLOCKCHAIN_NETWORK_TYPE_UNSPECIFIED = 0;
  BLOCKCHAIN_NETWORK_TYPE_DEV = 1;
  BLOCKCHAIN_NETWORK_TYPE_TEST = 2;
  BLOCKCHAIN_NETWORK_TYPE_MAIN = 3;
}

message BlockchainNetwork {
  string name = 1;
  string url = 2;
  BlockchainNetworkType net_type = 3;
}
