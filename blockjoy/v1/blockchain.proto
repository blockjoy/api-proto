syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/blockchain.proto";
import "blockjoy/common/v1/image.proto";
import "blockjoy/common/v1/node.proto";
import "google/protobuf/timestamp.proto";

message Blockchain {
  string id = 1;
  string name = 2;
  optional string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  optional string project_url = 6;
  optional string repo_url = 7;
  // All possible node types that can be created for this chain.
  repeated BlockchainNodeType node_types = 8;
  // Optional statistics around the state of this chain.
  BlockchainStats stats = 9;
  BlockchainVisibility visibility = 10;
  string ticker = 11;
}

// Service for blockchain-specific requests.
service BlockchainService {
  // Create a new blockchain version for a given blockchain and node type.
  rpc CreateVersion(BlockchainServiceCreateVersionRequest) returns (BlockchainServiceCreateVersionResponse);
  // Get a single blockchain's info from its id.
  rpc Get(BlockchainServiceGetRequest) returns (BlockchainServiceGetResponse);
  // Get an image archive location for some image identifier.
  rpc GetImage(BlockchainServiceGetImageRequest) returns (BlockchainServiceGetImageResponse);
  // Get a blockchain plugin for some image identifier.
  rpc GetPlugin(BlockchainServiceGetPluginRequest) returns (BlockchainServiceGetPluginResponse);
  // Get hardware requirements for some image identifier.
  rpc GetRequirements(BlockchainServiceGetRequirementsRequest) returns (BlockchainServiceGetRequirementsResponse);
  // Returns a list of all blockchains.
  rpc List(BlockchainServiceListRequest) returns (BlockchainServiceListResponse);
  // List node versions for some protocol and node type.
  rpc ListImageVersions(BlockchainServiceListImageVersionsRequest) returns (BlockchainServiceListImageVersionsResponse);
  // Add a new supported blockchain `node_type`.
  rpc AddNodeType(BlockchainServiceAddNodeTypeRequest) returns (BlockchainServiceAddNodeTypeResponse);
  // Add a new blockchain version.
  rpc AddVersion(BlockchainServiceAddVersionRequest) returns (BlockchainServiceAddVersionResponse);
}

message BlockchainServiceCreateVersionRequest {
  string blockchain_node_type_id = 1;
  string version = 2;
  optional string description = 3;
  repeated BlockchainProperty properties = 4;
}

message BlockchainServiceCreateVersionResponse {
  BlockchainVersion version = 1;
}

message BlockchainServiceGetRequest {
  string id = 1;
  optional string org_id = 2;
}

message BlockchainServiceGetResponse {
  Blockchain blockchain = 1;
}

message BlockchainServiceGetImageRequest {
  blockjoy.common.v1.ImageIdentifier id = 1;
}

message BlockchainServiceGetImageResponse {
  blockjoy.common.v1.ArchiveLocation location = 1;
}

message BlockchainServiceGetNetworksRequest {
  blockjoy.common.v1.ImageIdentifier id = 1;
}

message BlockchainServiceGetNetworksResponse {
  repeated blockjoy.common.v1.NetworkConfig networks = 1;
}

message BlockchainServiceGetPluginRequest {
  blockjoy.common.v1.ImageIdentifier id = 1;
}

message BlockchainServiceGetPluginResponse {
  blockjoy.common.v1.RhaiPlugin plugin = 1;
}

message BlockchainServiceGetRequirementsRequest {
  blockjoy.common.v1.ImageIdentifier id = 1;
}

message BlockchainServiceGetRequirementsResponse {
  uint32 vcpu_count = 1;
  uint64 mem_size_bytes = 2;
  uint64 disk_size_bytes = 3;
}

message BlockchainServiceListRequest {
  optional string org_id = 1;
}

message BlockchainServiceListResponse {
  repeated Blockchain blockchains = 1;
}

message BlockchainServiceListImageVersionsRequest {
  string protocol = 1;
  blockjoy.common.v1.NodeType node_type = 2;
}

message BlockchainServiceListImageVersionsResponse {
  repeated blockjoy.common.v1.ImageIdentifier identifiers = 1;
}

message BlockchainNodeType {
  string id = 1;
  blockjoy.common.v1.NodeType node_type = 2;
  optional string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  repeated BlockchainVersion versions = 6;
  BlockchainVisibility visibility = 7;
}

message BlockchainVersion {
  string id = 1;
  string version = 2;
  optional string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  repeated blockjoy.common.v1.NetworkConfig networks = 6;
  repeated BlockchainProperty properties = 7;
}

message BlockchainServiceAddNodeTypeRequest {
  // The blockchain UUID for the new `node_type`.
  string id = 1;
  // The new `node_type` supported by the blockchain.
  blockjoy.common.v1.NodeType node_type = 2;
  // A readable description of this new `node_type`.
  optional string description = 3;
}

message BlockchainServiceAddNodeTypeResponse {}

message BlockchainServiceAddVersionRequest {
  // The blockchain UUID to add the new version to.
  string id = 1;
  // A semantically parseable representation of the new version.
  string version = 2;
  // A readable description of the new version.
  optional string description = 3;
  // The node type of the new version.
  blockjoy.common.v1.NodeType node_type = 4;
  // The properties applicable to this `version` and `node_type`.
  repeated BlockchainProperty properties = 5;
}

message BlockchainServiceAddVersionResponse {
  BlockchainVersion version = 1;
}

// A property that is supported by a node of a particular:
// 1. blockchain type,
// 2. node type,
// 3. version.
// When a blockchain node is created, a list of properties must be submitted by
// the caller. The properties that are required / allowed are defined by these
// properties here.
message BlockchainProperty {
  // The name of this property, i.e. `validator-key`.
  string name = 1;
  // A nice looking name that can be used for display purposes.
  string display_name = 2;
  // If there is one, this field contains the default value that should be
  // used if the user supplies no value.
  optional string default = 3;
  // The way this field should be displayed when a node with this property is
  // created.
  blockjoy.common.v1.UiType ui_type = 4;
  // If this is true then the property _must_ be supplied when a node of this
  // type and version is created. If this is false, then the property is treated
  // as optional and may be omitted.
  bool required = 5;
}

message BlockchainStats {
  optional uint64 node_count = 1;
  optional uint64 node_count_active = 2;
  optional uint64 node_count_syncing = 3;
  optional uint64 node_count_provisioning = 4;
  optional uint64 node_count_failed = 5;
}

enum BlockchainVisibility {
  BLOCKCHAIN_VISIBILITY_UNSPECIFIED = 0;
  BLOCKCHAIN_VISIBILITY_PRIVATE = 1;
  BLOCKCHAIN_VISIBILITY_PUBLIC = 2;
  BLOCKCHAIN_VISIBILITY_DEVELOPMENT = 3;
}
