syntax = "proto3";

package blockjoy.v1;

import "blockjoy/v1/node.proto";
import "google/protobuf/timestamp.proto";

message Blockchain {
  string id = 1;
  string name = 2;
  optional string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  optional string project_url = 6;
  optional string repo_url = 7;
  // All possible node types that can be created for this chain.
  repeated BlockchainNodeType node_types = 8;
  // Optional statistics around the state of this chain.
  BlockchainStats stats = 9;
}

message BlockchainStats {
  optional uint64 node_count = 1;
  optional uint64 node_count_active = 2;
  optional uint64 node_count_syncing = 3;
  optional uint64 node_count_provisioning = 4;
  optional uint64 node_count_failed = 5;
}

// Blockchain related service.
service BlockchainService {
  // Returns a single blockchain as identified by its id.
  rpc Get(BlockchainServiceGetRequest) returns (BlockchainServiceGetResponse);
  // Returns a list of all blockchains.
  rpc List(BlockchainServiceListRequest)
    returns (BlockchainServiceListResponse);
}

message BlockchainServiceGetRequest {
  string id = 1;
  optional string org_id = 2;
}

message BlockchainServiceGetResponse {
  Blockchain blockchain = 1;
}

message BlockchainServiceListRequest {
  optional string org_id = 1;
}

message BlockchainServiceListResponse {
  repeated Blockchain blockchains = 1;
}

message BlockchainNodeType {
  string id = 1;
  NodeType node_type = 2;
  optional string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  repeated BlockchainVersion versions = 6;
}

message BlockchainVersion {
  string id = 1;
  string version = 2;
  optional string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  repeated BlockchainNetwork networks = 6;
  repeated BlockchainProperty properties = 7;
}

// A property that is supported by a node of a particular:
// 1. blockchain type,
// 2. node type,
// 3. version.
// When a blockchain node is created, a list of properties must be submitted by
// the caller. The properties that are required / allowed are defined by these
// properties here.
message BlockchainProperty {
  // The name of this property, i.e. `validator-key`.
  string name = 1;
  // A nice looking name that can be used for display purposes.
  string display_name = 2;
  // If there is one, this field contains the default value that should be
  // used if the user supplies no value.
  optional string default = 3;
  // The way this field should be displayed when a node with this property is
  // created.
  UiType ui_type = 4;
  // If this is true then the property _must_ be supplied when a node of this
  // type and version is created. If this is false, then the property is treated
  // as optional and may be omitted.
  bool required = 5;
}

message BlockchainNetwork {
  string name = 1;
  string url = 2;
  BlockchainNetworkType net_type = 3;
}

enum BlockchainNetworkType {
  BLOCKCHAIN_NETWORK_TYPE_UNSPECIFIED = 0;
  BLOCKCHAIN_NETWORK_TYPE_DEV = 1;
  BLOCKCHAIN_NETWORK_TYPE_TEST = 2;
  BLOCKCHAIN_NETWORK_TYPE_MAIN = 3;
}
