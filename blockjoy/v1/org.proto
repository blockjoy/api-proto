syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/search.proto";
import "google/protobuf/timestamp.proto";

// Organization representation
message Org {
  // The UUID of a the organization.
  string id = 1;
  // The name of this organization.
  string name = 2;
  // A personal organization is the default for a single user.
  bool personal = 3;
  // The moment which this organization was created.
  google.protobuf.Timestamp created_at = 4;
  // The moment which this organization was last updated.
  google.protobuf.Timestamp updated_at = 5;
  // This field contains the users of this organization.
  repeated OrgUser members = 6;
  // The number of users in this organization.
  uint64 member_count = 7;
  // The number of nodes that this organization has.
  uint64 host_count = 8;
  // The number of nodes that this organization has.
  uint64 node_count = 9;
}

// Service for managing organizations.
service OrgService {
  // Get all the organizations for a user.
  rpc Get(OrgServiceGetRequest) returns (OrgServiceGetResponse);
  // List all members of orgs matching a set of criteria.
  rpc List(OrgServiceListRequest) returns (OrgServiceListResponse);
  // Create a new organization.
  rpc Create(OrgServiceCreateRequest) returns (OrgServiceCreateResponse);
  // Update an existing organization.
  rpc Update(OrgServiceUpdateRequest) returns (OrgServiceUpdateResponse);
  // Mark an organization as deleted.
  rpc Delete(OrgServiceDeleteRequest) returns (OrgServiceDeleteResponse);
  // Remove a member from an organization.
  rpc RemoveMember(OrgServiceRemoveMemberRequest) returns (OrgServiceRemoveMemberResponse);
  // Get the host provision token for a user and organization.
  rpc GetProvisionToken(OrgServiceGetProvisionTokenRequest) returns (OrgServiceGetProvisionTokenResponse);
  // Regenerates the host provision token for a user and organization.
  rpc ResetProvisionToken(OrgServiceResetProvisionTokenRequest) returns (OrgServiceResetProvisionTokenResponse);
}

message OrgServiceGetRequest {
  string id = 1;
}

message OrgServiceGetResponse {
  Org org = 1;
}

message OrgServiceListRequest {
  // If this is set to a user id, only orgs that that user is a member of will
  // be returned
  optional string member_id = 1;
  // If this is true, only personal orgs are returned. If this is false, no
  // personal orgs are returned.
  optional bool personal = 2;
  // The number of items to be skipped over.
  uint64 offset = 3;
  // The number of items that will be returned. Together with offset, you can
  // use this to get pagination.
  uint64 limit = 4;
  // Search params.
  optional OrgSearch search = 5;
  // The field sorting order of results.
  repeated OrgSort sort = 6;
}

// This message contains fields used to search organizations as opposed to just
// filtering them.
message OrgSearch {
  // The way the search parameters should be combined.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search only the id.
  optional string id = 2;
  // Search only the name.
  optional string name = 3;
}

message OrgSort {
  OrgSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum OrgSortField {
  ORG_SORT_FIELD_UNSPECIFIED = 0;
  ORG_SORT_FIELD_NAME = 1;
  ORG_SORT_FIELD_CREATED_AT = 2;
  ORG_SORT_FIELD_UPDATED_AT = 3;
}

message OrgServiceListResponse {
  repeated Org orgs = 1;
  // The total number of orgs matching your query.
  uint64 org_count = 2;
}

message OrgServiceCreateRequest {
  string name = 1;
}

message OrgServiceCreateResponse {
  Org org = 1;
}

message OrgServiceUpdateRequest {
  // The id of the organization to be updated.
  string id = 1;
  // If this value is provided, the name of the organization will be set to the
  // provided value.
  optional string name = 2;
}

message OrgServiceUpdateResponse {}

message OrgServiceDeleteRequest {
  string id = 1;
}

message OrgServiceDeleteResponse {}

message OrgServiceRemoveMemberRequest {
  string user_id = 1;
  string org_id = 2;
}

message OrgServiceRemoveMemberResponse {}

message OrgServiceGetProvisionTokenRequest {
  string user_id = 1;
  string org_id = 2;
}

message OrgServiceGetProvisionTokenResponse {
  string token = 1;
}

message OrgServiceResetProvisionTokenRequest {
  string user_id = 1;
  string org_id = 2;
}

message OrgServiceResetProvisionTokenResponse {
  string token = 1;
}

message OrgUser {
  string user_id = 1;
  string org_id = 2;
  string name = 3;
  string email = 4;
  repeated OrgRole roles = 5;
  google.protobuf.Timestamp joined_at = 6;
}

message OrgRole {
  optional string name = 1;
}
