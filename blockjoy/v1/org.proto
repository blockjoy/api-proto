syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/address.proto";
import "blockjoy/common/v1/currency.proto";
import "blockjoy/common/v1/search.proto";
import "google/protobuf/timestamp.proto";

// Organization representation
message Org {
  // The UUID of a the organization.
  string id = 1;
  // The name of this organization.
  string name = 2;
  // A personal organization is the default for a single user.
  bool personal = 3;
  // The moment which this organization was created.
  google.protobuf.Timestamp created_at = 4;
  // The moment which this organization was last updated.
  google.protobuf.Timestamp updated_at = 5;
  // This field contains the users of this organization.
  repeated OrgUser members = 6;
  // The number of users in this organization.
  uint64 member_count = 7;
  // The number of nodes that this organization has.
  uint64 host_count = 8;
  // The number of nodes that this organization has.
  uint64 node_count = 9;
}

// Service for managing organizations.
service OrgService {
  // Get all the organizations for a user.
  rpc Get(OrgServiceGetRequest) returns (OrgServiceGetResponse);
  // List all members of orgs matching a set of criteria.
  rpc List(OrgServiceListRequest) returns (OrgServiceListResponse);
  // Create a new organization.
  rpc Create(OrgServiceCreateRequest) returns (OrgServiceCreateResponse);
  // Update an existing organization.
  rpc Update(OrgServiceUpdateRequest) returns (OrgServiceUpdateResponse);
  // Mark an organization as deleted.
  rpc Delete(OrgServiceDeleteRequest) returns (OrgServiceDeleteResponse);
  // Remove a member from an organization.
  rpc RemoveMember(OrgServiceRemoveMemberRequest) returns (OrgServiceRemoveMemberResponse);
  // Get the host provision token for a user and organization.
  rpc GetProvisionToken(OrgServiceGetProvisionTokenRequest) returns (OrgServiceGetProvisionTokenResponse);
  // Regenerates the host provision token for a user and organization.
  rpc ResetProvisionToken(OrgServiceResetProvisionTokenRequest) returns (OrgServiceResetProvisionTokenResponse);

  // Add a new card to this org.
  rpc InitCard(OrgServiceInitCardRequest) returns (OrgServiceInitCardResponse);
  // List all payment methods for the current org.
  rpc ListPaymentMethods(OrgServiceListPaymentMethodsRequest) returns (OrgServiceListPaymentMethodsResponse);
  // Returns details about the billing and billing cycle for this org.
  rpc BillingDetails(OrgServiceBillingDetailsRequest) returns (OrgServiceBillingDetailsResponse);

  // Returns the address for this organisation if there is one.
  rpc GetAddress(OrgServiceGetAddressRequest) returns (OrgServiceGetAddressResponse);
  // Sets the address for this org, overwriting the previous value.
  rpc SetAddress(OrgServiceSetAddressRequest) returns (OrgServiceSetAddressResponse);
  // Removes the address set for this org.
  rpc DeleteAddress(OrgServiceDeleteAddressRequest) returns (OrgServiceDeleteAddressResponse);

  // Returns the data
  rpc GetInvoices(OrgServiceGetInvoicesRequest) returns (OrgServiceGetInvoicesResponse);
}

message OrgServiceGetRequest {
  string id = 1;
}

message OrgServiceGetResponse {
  Org org = 1;
}

message OrgServiceListRequest {
  // If this is set to a user id, only orgs that that user is a member of will
  // be returned
  optional string member_id = 1;
  // If this is true, only personal orgs are returned. If this is false, no
  // personal orgs are returned.
  optional bool personal = 2;
  // The number of items to be skipped over.
  uint64 offset = 3;
  // The number of items that will be returned. Together with offset, you can
  // use this to get pagination.
  uint64 limit = 4;
  // Search params.
  optional OrgSearch search = 5;
  // The field sorting order of results.
  repeated OrgSort sort = 6;
}

// This message contains fields used to search organizations as opposed to just
// filtering them.
message OrgSearch {
  // The way the search parameters should be combined.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search only the id.
  optional string id = 2;
  // Search only the name.
  optional string name = 3;
}

message OrgSort {
  OrgSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum OrgSortField {
  ORG_SORT_FIELD_UNSPECIFIED = 0;
  ORG_SORT_FIELD_NAME = 1;
  ORG_SORT_FIELD_CREATED_AT = 2;
  ORG_SORT_FIELD_UPDATED_AT = 3;
  ORG_SORT_FIELD_HOST_COUNT = 4;
  ORG_SORT_FIELD_NODE_COUNT = 5;
  ORG_SORT_FIELD_MEMBER_COUNT = 6;
}

message OrgServiceListResponse {
  repeated Org orgs = 1;
  // The total number of orgs matching your query.
  uint64 org_count = 2;
}

message OrgServiceCreateRequest {
  string name = 1;
}

message OrgServiceCreateResponse {
  Org org = 1;
}

message OrgServiceUpdateRequest {
  // The id of the organization to be updated.
  string id = 1;
  // If this value is provided, the name of the organization will be set to the
  // provided value.
  optional string name = 2;
}

message OrgServiceUpdateResponse {}

message OrgServiceDeleteRequest {
  string id = 1;
}

message OrgServiceDeleteResponse {}

message OrgServiceRemoveMemberRequest {
  string user_id = 1;
  string org_id = 2;
}

message OrgServiceRemoveMemberResponse {}

message OrgServiceGetProvisionTokenRequest {
  string user_id = 1;
  string org_id = 2;
}

message OrgServiceGetProvisionTokenResponse {
  string token = 1;
}

message OrgServiceResetProvisionTokenRequest {
  string user_id = 1;
  string org_id = 2;
}

message OrgServiceResetProvisionTokenResponse {
  string token = 1;
}

message OrgUser {
  string user_id = 1;
  string org_id = 2;
  string name = 3;
  string email = 4;
  repeated OrgRole roles = 5;
  google.protobuf.Timestamp joined_at = 6;
}

message OrgRole {
  optional string name = 1;
}

message OrgServiceInitCardRequest {
  // The id of the org for which you want to initialise a new card.
  string org_id = 1;
  // The user that initiates this card.
  string user_id = 2;
}

message OrgServiceInitCardResponse {
  string client_secret = 1;
}

message OrgServiceListPaymentMethodsRequest {
  string org_id = 1;
}

message OrgServiceListPaymentMethodsResponse {
  repeated PaymentMethod methods = 1;
}

message PaymentMethod {
  // The id of the org to which this payment method belongs.
  optional string org_id = 2;
  // The id of the user that created this payment method.
  optional string user_id = 3;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  oneof method {
    // This payment method is done through a credit card.
    Card card = 7;
  }
}

message Card {
  string brand = 1;
  int64 exp_month = 2;
  int64 exp_year = 3;
  string last4 = 4;
}

message OrgServiceBillingDetailsRequest {
  string org_id = 1;
}

message OrgServiceBillingDetailsResponse {
  blockjoy.common.v1.Currency currency = 1;
  google.protobuf.Timestamp current_period_start = 2;
  google.protobuf.Timestamp current_period_end = 3;
  optional string default_payment_method = 4;
  google.protobuf.Timestamp created_at = 5;
  string status = 7;
  repeated BillingItem items = 8;
}

message BillingItem {
  optional string name = 1;
  // In the lowest denomination, e.g. dollar cents or pennies.
  optional int64 unit_amount = 2;
  // The number of items.
  optional uint64 quantity = 3;
}

message OrgServiceGetAddressRequest {
  string org_id = 1;
}

message OrgServiceGetAddressResponse {
  optional blockjoy.common.v1.Address address = 1;
}

message OrgServiceSetAddressRequest {
  string org_id = 1;
  blockjoy.common.v1.Address address = 2;
}

message OrgServiceSetAddressResponse {}

message OrgServiceDeleteAddressRequest {
  string org_id = 1;
}

message OrgServiceDeleteAddressResponse {}

message OrgServiceGetInvoicesRequest {
  string org_id = 1;
}

message OrgServiceGetInvoicesResponse {
  repeated Invoice invoices = 1;
}

message Invoice {
  // The invoice number is displayed on the invoice.
  optional string number = 1;
  optional google.protobuf.Timestamp created_at = 2;
  repeated Discount discount = 3;
  optional string pdf_url = 4;
  repeated LineItem line_items = 5;
  optional InvoiceStatus status = 6;
  optional int64 subtotal = 7;
  optional int64 total = 8;
}

message Discount {
  optional string name = 1;
  optional blockjoy.common.v1.Amount amount = 2;
}

message LineItem {
  int64 subtotal = 1;
  optional int64 total = 2;
  optional string description = 3;
  optional google.protobuf.Timestamp start = 4;
  optional google.protobuf.Timestamp end = 5;
  optional string plan = 6;
  bool proration = 7;
  optional uint64 quantity = 8;
  repeated Discount discounts = 9;
}

enum InvoiceStatus {
  INVOICE_STATUS_UNSPECIFIED = 0;
  INVOICE_STATUS_DRAFT = 1;
  INVOICE_STATUS_OPEN = 2;
  INVOICE_STATUS_PAID = 3;
  INVOICE_STATUS_UNCOLLECTIBLE = 4;
  INVOICE_STATUS_VOID = 5;
}
