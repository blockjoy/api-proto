syntax = "proto3";

package blockjoy.v1;

// Retrieve and refresh API token
service AuthService {
  // Login user, i.e. retrieve token
  rpc Login(AuthServiceLoginRequest) returns (AuthServiceLoginResponse);
  // Confirm user registration
  rpc Confirm(AuthServiceConfirmRequest) returns (AuthServiceConfirmResponse);
  // Refresh API token.
  rpc Refresh(AuthServiceRefreshRequest) returns (AuthServiceRefreshResponse);
  // Send the reset password email out to this user. Intentionally returns
  // nothing to hide whether the user was registered or not.
  rpc ResetPassword(AuthServiceResetPasswordRequest) returns
    (AuthServiceResetPasswordResponse);
  // Update the user's password to a new value
  rpc UpdatePassword(AuthServiceUpdatePasswordRequest) returns
    (AuthServiceUpdatePasswordResponse);
  // Update the user's password via profile UI
  rpc UpdateUIPassword(AuthServiceUpdateUIPasswordRequest)
    returns (AuthServiceUpdateUIPasswordResponse);
}

message AuthServiceLoginRequest {
  string email = 1;
  string password = 2;
}

message AuthServiceLoginResponse {
  // This is the auth token that you will include with each request. It is a
  // Json Web Token, and therefore it may be decoded and inspected by the client
  // to seen the allowed permissions.
  string token = 1;
  // The `refresh token` is used to obtain a new token without having to provide
  // the email and password again. Note that if you are a browser client, this
  // field can be ignored, because we also include a HTTP-Only, Set-Cookie
  // header. This means that this token does not have to be stored in
  // localStorage.
  string refresh = 2;
}

message AuthServiceRefreshRequest {
  // This is your old token. It is allowed that this token is expired.
  string token = 1;
  // This is the refresh token that was sent to you on login. It is optional
  // here, because if it is not provided, the value from the metadata is used as
  // a fallback. This means that if you are a browser client, you do not have to
  // provide this field, as it was set by the call to AuthService/Login, or by
  // the previous call to this endpoint.
  optional string refresh = 2;
}

message AuthServiceRefreshResponse {
  // A newly minted Json Web Token.
  string token = 1;
  // The new refresh token. Just as with the call to AuthService/Login, this
  // value is duplicated in the metadata, so a cookie can be set for the browser
  // client.
  string refresh = 2;
}

message AuthServiceResetPasswordRequest {
  string email = 1;
}

message AuthServiceResetPasswordResponse {
}

message AuthServiceUpdatePasswordRequest {
  string password = 1;
}

message AuthServiceUpdatePasswordResponse {
}

message AuthServiceUpdateUIPasswordRequest {
  string old_password = 1;
  string new_password = 2;
}

message AuthServiceUpdateUIPasswordResponse {
}

message AuthServiceConfirmRequest {
}

message AuthServiceConfirmResponse {
}

message AuthServiceSwitchOrgRequest {
  string org_id = 1;
}
