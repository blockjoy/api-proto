syntax = "proto3";

package blockjoy.v1;

// Service for authentication and authorization.
service AuthService {
  // Login with an email and password.
  rpc Login(AuthServiceLoginRequest) returns (AuthServiceLoginResponse);
  // Refresh API token.
  rpc Refresh(AuthServiceRefreshRequest) returns (AuthServiceRefreshResponse);
  // Confirm the registration of a new user.
  rpc Confirm(AuthServiceConfirmRequest) returns (AuthServiceConfirmResponse);
  // Send an email to a user to reset their password.
  rpc ResetPassword(AuthServiceResetPasswordRequest) returns (AuthServiceResetPasswordResponse);
  // Update the user's password after a reset password request.
  rpc UpdatePassword(AuthServiceUpdatePasswordRequest) returns (AuthServiceUpdatePasswordResponse);
  // Update the user's password after confirming the existing one.
  rpc UpdateUIPassword(AuthServiceUpdateUIPasswordRequest) returns (AuthServiceUpdateUIPasswordResponse);
  // List the permissions for a user on behalf of some org.
  rpc ListPermissions(AuthServiceListPermissionsRequest) returns (AuthServiceListPermissionsResponse);
}

message AuthServiceLoginRequest {
  // The email of the user logging in.
  string email = 1;
  // The password of the user logging in.
  string password = 2;
}

message AuthServiceLoginResponse {
  // A bearer token for client requests.
  string token = 1;
  // The refresh token for refreshing the bearer token.
  string refresh = 2;
}

message AuthServiceRefreshRequest {
  // The previous bearer token (which may be expired).
  string token = 1;
  // The refresh token (or read from the request headers if omitted).
  optional string refresh = 2;
}

message AuthServiceRefreshResponse {
  // A new bearer token for client requests.
  string token = 1;
  // A new refresh token for refreshing the bearer token.
  string refresh = 2;
}

message AuthServiceConfirmRequest {}

message AuthServiceConfirmResponse {
  // A new bearer token for subsequent client requests.
  string token = 1;
  // A new refresh token for subsequent refresh requests.
  string refresh = 2;
}

message AuthServiceResetPasswordRequest {
  // The email of the user resetting their password.
  string email = 1;
}

message AuthServiceResetPasswordResponse {}

message AuthServiceUpdatePasswordRequest {
  // The new password following a reset request.
  string password = 1;
}

message AuthServiceUpdatePasswordResponse {}

message AuthServiceUpdateUIPasswordRequest {
  // The user updating their password.
  string user_id = 1;
  // The existing password for the user.
  string old_password = 2;
  // The new password for the user.
  string new_password = 3;
}

message AuthServiceUpdateUIPasswordResponse {}

message AuthServiceListPermissionsRequest {
  // The user to list permissions for.
  string user_id = 1;
  // The org the user is acting on behalf of.
  string org_id = 2;
  // Whether to include permissions from the token in the response.
  optional bool include_token = 3;
}

message AuthServiceListPermissionsResponse {
  repeated string permissions = 1;
}
