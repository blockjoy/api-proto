syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/firewall.proto";
import "blockjoy/common/v1/image.proto";
import "blockjoy/common/v1/node.proto";
import "google/protobuf/timestamp.proto";

message Command {
  // Each command has a unique id that identifies it.
  string id = 1;
  // A command may have an exit code.
  optional CommandExitCode exit_code = 2;
  // A command may have an outcome message.
  optional string exit_message = 3;
  // Command may exit with error and retry hint.
  optional uint64 retry_hint_seconds = 4;
  // A client may acknowledge that they have received a command, even if they
  // have not finished processing it.
  optional google.protobuf.Timestamp acked_at = 5;
  // The rest of the fields are split in two. There are commands that are meant
  // to instrument hosts, and commands that are meant to instrument nodes. The
  // reason we have this dichotomy is because the commands that go to a node
  // typically look different from those that go to a host.
  oneof command {
    NodeCommand node = 6;
    HostCommand host = 7;
  }
}

// Commands to be executed on a host.
service CommandService {
  // Update the status of a command.
  //
  // This method is only used by the host.
  rpc Update(CommandServiceUpdateRequest) returns (CommandServiceUpdateResponse);
  // Acknowledge the reciept of a command.
  rpc Ack(CommandServiceAckRequest) returns (CommandServiceAckResponse);
  // Get a list of unacknowledged commands.
  rpc Pending(CommandServicePendingRequest) returns (CommandServicePendingResponse);
}

message CommandServiceUpdateRequest {
  string id = 1;
  optional CommandExitCode exit_code = 2;
  optional string exit_message = 3;
  optional uint64 retry_hint_seconds = 4;
}

message CommandServiceUpdateResponse {
  Command command = 1;
}

message CommandServiceAckRequest {
  string id = 1;
}

message CommandServiceAckResponse {}

message CommandServicePendingRequest {
  string host_id = 1;
  optional string filter_type = 2;
}

message CommandServicePendingResponse {
  repeated Command commands = 1;
}

message NodeCommand {
  string node_id = 1;
  string host_id = 2;
  string api_command_id = 3;
  google.protobuf.Timestamp created_at = 4;

  oneof command {
    NodeStart start = 5;
    NodeStop stop = 6;
    NodeRestart restart = 7;
    NodeUpgrade upgrade = 8;
    NodeUpdate update = 9;
    NodeGet info_get = 10;
    NodeCreate create = 11;
    NodeDelete delete = 12;
  }
}

message NodeStart {}

message NodeStop {}

message NodeRestart {}

// Update a node to a new image.
message NodeUpgrade {
  blockjoy.common.v1.ImageIdentifier image = 1;
}

message NodeUpdate {
  repeated blockjoy.common.v1.FirewallRule rules = 1;
}

message NodeGet {}

message NodeCreate {
  string name = 1;
  string blockchain = 2;
  blockjoy.common.v1.ImageIdentifier image = 3;
  blockjoy.common.v1.NodeType node_type = 4;
  string ip = 5;
  string gateway = 6;
  repeated Parameter properties = 7;
  repeated blockjoy.common.v1.FirewallRule rules = 8;
  string network = 9;
}

message NodeDelete {}

message Parameter {
  string name = 1;
  string value = 2;
}

message HostCommand {
  string host_id = 1;
}

// Exit code type after executing a command.
enum CommandExitCode {
  COMMAND_EXIT_CODE_UNSPECIFIED = 0;
  COMMAND_EXIT_CODE_OK = 1;
  COMMAND_EXIT_CODE_INTERNAL_ERROR = 2;
  COMMAND_EXIT_CODE_NODE_NOT_FOUND = 3;
  COMMAND_EXIT_CODE_BLOCKING_JOB_RUNNING = 4;
  COMMAND_EXIT_CODE_SERVICE_NOT_READY = 5;
  COMMAND_EXIT_CODE_SERVICE_BROKEN = 6;
  COMMAND_EXIT_CODE_NOT_SUPPORTED = 7;
}
