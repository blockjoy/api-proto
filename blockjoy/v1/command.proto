syntax = "proto3";

package blockjoy.v1;

import "blockjoy/v1/node.proto";
import "google/protobuf/timestamp.proto";

message Command {
  // Each command has a unique id that identifies it.
  string id = 1;
  // A command may have an exit code.
  optional CommandExitCode exit_code = 2;
  // A command may have an outcome message.
  optional string exit_message = 3;
  // Command may exit with error and retry hint.
  optional uint64 retry_hint_seconds = 4;
  // A client may acknowledge that they have received a command, even if they
  // have not finished processing it.
  optional google.protobuf.Timestamp acked_at = 5;
  // The rest of the fields are split in two. There are commands that are meant
  // to instrument hosts, and commands that are meant to instrument nodes. The
  // reason we have this dichotomy is because the commands that go to a node
  // typically look different from those that go to a host.
  oneof command {
    NodeCommand node = 6;
    HostCommand host = 7;
  }
}

// Service providing commands to be executed on a Host
service CommandService {
  // Update a single command status.
  // This shall be used only by host.
  rpc Update(CommandServiceUpdateRequest) returns
    (CommandServiceUpdateResponse);
  // Use this method to acknowledge that you have received an command and either
  // already started processing it, or will soon start processing it.
  rpc Ack(CommandServiceAckRequest) returns (CommandServiceAckResponse);
  // Get pending commands for host. Pending is means that their execution has
  // not completed, be that successfully or unsuccessfully. This is defined as
  // commands that do not have an `exit_code`. To mark a command as no longer
  // pending, use the `Update` method and provide an `exit_code`.
  // This can be used by anyone, but primarily by host.
  rpc Pending(CommandServicePendingRequest) returns
    (CommandServicePendingResponse);
}

message CommandServiceUpdateRequest {
  string id = 1;
  optional CommandExitCode exit_code = 2;
  optional string exit_message = 3;
  optional uint64 retry_hint_seconds = 4;
}

message CommandServiceUpdateResponse {
  Command command = 1;
}

message CommandServiceAckRequest {
  string id = 1;
}

message CommandServiceAckResponse {
}

message CommandServicePendingRequest {
  string host_id = 1;
  optional string filter_type = 2;
}

message CommandServicePendingResponse {
  repeated Command commands = 1;
}

message NodeCommand {
  string node_id = 1;
  string host_id = 2;
  string api_command_id = 3;
  google.protobuf.Timestamp created_at = 4;

  oneof command {
    NodeStart start = 5;
    NodeStop stop = 6;
    NodeRestart restart = 7;
    NodeUpgrade upgrade = 8;
    NodeUpdate update = 9;
    NodeGet info_get = 10;
    NodeCreate create = 11;
    NodeDelete delete = 12;
  };
}

message NodeStart {
}

message NodeStop {
}

message NodeRestart {
}

// Updates a node to use a new OS-image
message NodeUpgrade {
  ContainerImage image = 1;
}

message NodeUpdate {
  repeated Rule rules = 1;
}

message NodeGet {
}

message NodeCreate {
  string name = 1;
  string blockchain = 2;
  ContainerImage image = 3;
  NodeType node_type = 4;
  string ip = 5;
  string gateway = 6;
  repeated Parameter properties = 7;
  repeated Rule rules = 8;
  string network = 9;
}

message NodeDelete {
}

message Parameter {
  string name = 1;
  string value = 2;
}

message ContainerImage {
  // snake_cased name of the blockchain
  string protocol = 1;
  // snake_cased name of the node type
  NodeType node_type = 2;
  // semantic version string of the node type version
  string node_version = 3;
}

message Rule {
  string name = 1;
  Action action = 2;
  Direction direction = 3;
  Protocol protocol = 4;
  optional string ips = 5;
  repeated uint32 ports = 6;
}

enum Action {
  ACTION_UNSPECIFIED = 0;
  ACTION_ALLOW = 1;
  ACTION_DENY = 2;
  ACTION_REJECT = 3;
}

enum Direction {
  DIRECTION_UNSPECIFIED = 0;
  DIRECTION_OUT = 1;
  DIRECTION_IN = 2;
}

enum Protocol {
  PROTOCOL_UNSPECIFIED = 0;
  PROTOCOL_TCP = 1;
  PROTOCOL_UDP = 2;
  PROTOCOL_BOTH = 3;
}

message HostCommand {
  // We don't do this yet, but it is here for forwards compatibility.
  string host_id = 1;
}

enum CommandExitCode {
  COMMAND_EXIT_CODE_UNSPECIFIED = 0;
  COMMAND_EXIT_CODE_OK = 1;
  COMMAND_EXIT_CODE_INTERNAL_ERROR = 2;
  COMMAND_EXIT_CODE_NODE_NOT_FOUND = 3;
  COMMAND_EXIT_CODE_BLOCKING_JOB_RUNNING = 4;
  COMMAND_EXIT_CODE_SERVICE_NOT_READY = 5;
  COMMAND_EXIT_CODE_SERVICE_BROKEN = 6;
  COMMAND_EXIT_CODE_NOT_SUPPORTED = 7;
}
