syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/config.proto";
import "blockjoy/v1/node.proto";
import "google/protobuf/timestamp.proto";

message Command {
  // A unique command identifier.
  string command_id = 1;
  // A command may have an exit code.
  optional CommandExitCode exit_code = 2;
  // A command may have an outcome message.
  optional string exit_message = 3;
  // A command may exit with a transient error and time to retry.
  optional uint64 retry_hint_seconds = 4;
  // The time the command was created.
  google.protobuf.Timestamp created_at = 5;
  // The time the client acknowledged receipt (even if not yet processed).
  google.protobuf.Timestamp acked_at = 6;
  // Additional command info, split by node or host types.
  oneof command {
    NodeCommand node = 7;
    HostCommand host = 8;
  }
}

// Commands to be executed on a host.
service CommandService {
  // Acknowledge the reciept of a command.
  rpc Ack(CommandServiceAckRequest) returns (CommandServiceAckResponse);
  // Allows a user to retrieve a list of commands using a set of filter params.
  rpc List(CommandServiceListRequest) returns (CommandServiceListResponse);
  // Get a list of unacknowledged commands.
  rpc Pending(CommandServicePendingRequest) returns (CommandServicePendingResponse);
  // Update the status of a command (only used by the host).
  rpc Update(CommandServiceUpdateRequest) returns (CommandServiceUpdateResponse);
}

message CommandServiceAckRequest {
  string command_id = 1;
}

message CommandServiceAckResponse {}

message CommandServiceListRequest {
  optional string node_id = 1;
  optional string host_id = 2;
  optional CommandExitCode exit_code = 3;
}

message CommandServiceListResponse {
  repeated Command commands = 1;
}

message CommandServicePendingRequest {
  string host_id = 1;
  optional string filter_type = 2;
}

message CommandServicePendingResponse {
  repeated Command commands = 1;
}

message CommandServiceUpdateRequest {
  string command_id = 1;
  optional CommandExitCode exit_code = 2;
  optional string exit_message = 3;
  optional uint64 retry_hint_seconds = 4;
}

message CommandServiceUpdateResponse {
  Command command = 1;
}

message HostCommand {
  string host_id = 1;

  oneof command {
    HostStart start = 2;
    HostStop stop = 3;
    HostRestart restart = 4;
    HostPending pending = 5;
  }
}

message HostStart {}

message HostStop {}

message HostRestart {}

message HostPending {}

message NodeCommand {
  string host_id = 1;
  string node_id = 2;
  string node_name = 3;

  oneof command {
    NodeCreate create = 4;
    NodeStart start = 5;
    NodeStop stop = 6;
    NodeRestart restart = 7;
    NodeUpdate update = 8;
    NodeUpgrade upgrade = 9;
    NodeDelete delete = 10;
  }
}

message NodeCreate {
  Node node = 1;
}

message NodeStart {}

message NodeStop {}

message NodeRestart {}

message NodeUpdate {
  string node_id = 1;
  optional bool auto_upgrade = 2;
  optional string new_org_id = 3;
  optional string new_org_name = 4;
  optional string new_display_name = 5;
  optional string new_note = 6;
  repeated blockjoy.common.v1.ImagePropertyValue new_values = 7;
  optional blockjoy.common.v1.FirewallConfig new_firewall = 8;
}

message NodeUpgrade {
  Node node = 1;
}

message NodeDelete {}

// Exit code type after executing a command.
enum CommandExitCode {
  COMMAND_EXIT_CODE_UNSPECIFIED = 0;
  COMMAND_EXIT_CODE_OK = 1;
  COMMAND_EXIT_CODE_INTERNAL_ERROR = 2;
  COMMAND_EXIT_CODE_NODE_NOT_FOUND = 3;
  COMMAND_EXIT_CODE_BLOCKING_JOB_RUNNING = 4;
  COMMAND_EXIT_CODE_SERVICE_NOT_READY = 5;
  COMMAND_EXIT_CODE_SERVICE_BROKEN = 6;
  COMMAND_EXIT_CODE_NOT_SUPPORTED = 7;
  COMMAND_EXIT_CODE_NODE_UPGRADE_ROLLBACK = 8;
  COMMAND_EXIT_CODE_NODE_UPGRADE_FAILURE = 9;
}
