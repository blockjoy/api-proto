syntax = "proto3";

package blockjoy.v1;

import "google/protobuf/empty.proto";

/* Define staging status */
enum StatusName {
  STATUS_NAME_UNSPECIFIED = 0;
  STATUS_NAME_DEVELOPMENT = 1;
  STATUS_NAME_UNSTABLE = 2;
  STATUS_NAME_STABLE = 3;
}

/* Message type used for identifying a specific configuration */
message ConfigIdentifier {
  /* snake_cased name of the blockchain */
  string protocol = 1;
  /* snake_cased name of the node type */
  string node_type = 2;
  /* semantic version string of the node type version */
  string node_version = 3;
  /* Does defined tuple have the requested tag assigned */
  StatusName status = 4;
}

message BundleIdentifier {
  /* semantic version string of the bundle version */
  string version = 1;
}

message Configuration {
  ConfigIdentifier identifier = 1;
  /* Configuration file contents */
  bytes toml_content = 2;
}

message ArchiveLocation {
  string url = 1;
}

message BabelVersionsRequest {
  string protocol = 1;
  string node_type = 2;
  StatusName status = 3;
}

message BabelVersionsResponse {
  repeated ConfigIdentifier identifiers = 1;
}

message BundleVersionsRequest {
  StatusName status = 1;
}

message BundleVersionsResponse {
  repeated BundleIdentifier identifiers = 1;
}

message RequirementsResponse {
  int64 vcpu_count = 1;
  int64 mem_size_mb = 2;
  int64 disk_size_gb = 3;
}

message Parameter {
  string name = 1;
  string value = 2;
}

message NetworkConfiguration {
  string name = 1;
  repeated Parameter attributes = 2;
}

message NetConfigurationResponse {
  repeated NetworkConfiguration configurations = 1;
}

/* Babel cookbook service */
service CookBookService {
  /* Retrieve configuration for specific version and state */
  rpc RetrieveConfiguration(ConfigIdentifier) returns (Configuration) {}
  /* Retrieve image for specific version and state */
  rpc RetrieveImage(ConfigIdentifier) returns (ArchiveLocation) {}
  /* Retrieve kernel file for specific version and state */
  rpc RetrieveKernel(ConfigIdentifier) returns (ArchiveLocation) {}
  /* Retrieve hardware requirements for given identifier */
  rpc Requirements(ConfigIdentifier) returns (RequirementsResponse) {}
  /* Retrieve net configurations for given chain */
  rpc NetConfigurations(ConfigIdentifier) returns (NetConfigurationResponse) {}
  /* List all available babel versions */
  rpc ListBabelVersions(BabelVersionsRequest) returns (BabelVersionsResponse) {}
  /* Promote/Demote configuration/image to the desired state */
  rpc AddStage(ConfigIdentifier) returns (google.protobuf.Empty) {}
  /* Disable configuration in the desired state */
  rpc RemoveStage(ConfigIdentifier) returns (google.protobuf.Empty) {}
  /* Delete configuration/image from storage */
  rpc Delete(ConfigIdentifier) returns (google.protobuf.Empty) {}
}

/* Retrieve manage BVD bundles */
service BundleService {
  /* Retrieve image for specific version and state */
  rpc Retrieve(BundleIdentifier) returns (ArchiveLocation) {}
  /* List all available bundle versions */
  rpc ListBundleVersions(BundleVersionsRequest)
    returns (BundleVersionsResponse) {}
  /* Promote/Demote bundle to the desired state */
  rpc AddStage(BundleIdentifier) returns (google.protobuf.Empty) {}
  /* Disable configuration in the desired state */
  rpc RemoveStage(BundleIdentifier) returns (google.protobuf.Empty) {}
  /* Delete bundle from storage */
  rpc Delete(BundleIdentifier) returns (google.protobuf.Empty) {}
}
