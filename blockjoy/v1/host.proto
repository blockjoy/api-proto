syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/currency.proto";
import "blockjoy/common/v1/node.proto";
import "blockjoy/common/v1/search.proto";
import "google/protobuf/timestamp.proto";

message Host {
  // This is the id of the host.
  string id = 1;
  // This is the randomly generated name of the host.
  string name = 2;
  // The version of the blockjoy control software running on the host.
  string version = 3;
  // The number of logical cores the machine has, _not_ the number of physical
  // cores.
  uint64 cpu_count = 5;
  // The amount of physical memory the machine has.
  uint64 mem_size_bytes = 6;
  // The size of the physical disks the machine has.
  uint64 disk_size_bytes = 7;
  // The operating system running on the machine, i.e. "BSD" or "Linux".
  string os = 8;
  // The version of said operating system running on the host.
  string os_version = 9;
  // The ip address on which the machine is reachable.
  string ip = 10;
  // The moment this host was created. Corresponds to the moment that the
  // host_provision was
  google.protobuf.Timestamp created_at = 12;
  // The ip gateway of this host.
  string ip_gateway = 15;
  // The organization that this host belongs to.
  string org_id = 16;
  // The number of nodes on this host.
  uint64 node_count = 17;
  // The name of the organization that this host belongs to.
  string org_name = 18;
  // The region of the host.
  optional string region = 19;
  // The optional billing amount for this host.
  optional blockjoy.common.v1.BillingAmount billing_amount = 20;
  // The root directory of the vmm, where all data related to the vmm is stored,
  // i.e. config data, secrets, vm mountpoints. Usually this will be
  // `/var/lib/blockvisor`.
  optional string vmm_mountpoint = 21;
  // A list of ip addresses available for this host.
  repeated HostIpAddress ip_addresses = 22;
  // The entity that can make decisions on whether to run nodes on this host.
  ManagedBy managed_by = 23;
}

// Manage hosts.
service HostService {
  // Create a single host.
  rpc Create(HostServiceCreateRequest) returns (HostServiceCreateResponse);
  // Get info for a single host.
  rpc Get(HostServiceGetRequest) returns (HostServiceGetResponse);
  // List all hosts matching some criteria.
  rpc List(HostServiceListRequest) returns (HostServiceListResponse);
  // Update a single host.
  rpc Update(HostServiceUpdateRequest) returns (HostServiceUpdateResponse);
  // Delete a single host.
  rpc Delete(HostServiceDeleteRequest) returns (HostServiceDeleteResponse);
  // Start a single host.
  rpc Start(HostServiceStartRequest) returns (HostServiceStartResponse);
  // Stop a single host.
  rpc Stop(HostServiceStopRequest) returns (HostServiceStopResponse);
  // Restart a single host.
  rpc Restart(HostServiceRestartRequest) returns (HostServiceRestartResponse);
  // Returns a list of regions where there are hosts available
  rpc Regions(HostServiceRegionsRequest) returns (HostServiceRegionsResponse);
}

message HostServiceCreateRequest {
  // Each user has a token within an organization that we use to identify which
  // user created this organization.
  string provision_token = 1;
  // A name to recognise the host by.
  string name = 2;
  // The version of the blockvisor software running on the host.
  string version = 3;
  // The number of logical cores on this computer, _not_ the number of physical
  // cores.
  uint64 cpu_count = 4;
  // The amount of memory that this computer has, in bytes.
  uint64 mem_size_bytes = 5;
  // The amount of storage that this computer has, in bytes.
  uint64 disk_size_bytes = 6;
  // The operating system running on this computer.
  string os = 7;
  // The version of said operating system.
  string os_version = 8;
  string ip_addr = 9;
  string ip_gateway = 12;
  // A list of ip addresses that the nodes running on this host will be allowed
  // to use.
  repeated string ips = 18;
  // The organization that this host belongs to. This field _must_ be populated
  // with the current organization id.
  optional string org_id = 13;
  // The region of the host
  optional string region = 14;
  // Optionally set a billing amount for this host.
  optional blockjoy.common.v1.BillingAmount billing_amount = 15;
  // The root directory of the vmm, where all data related to the vmm is stored,
  // i.e. config data, secrets, vm mountpoints. Usually this will be
  // `/var/lib/blockvisor`.
  optional string vmm_mountpoint = 16;
  // The entity that can make decisions on whether to run nodes on this host. By
  // default this value will be set to `Automatic`.
  optional ManagedBy managed_by = 17;
}

message HostServiceCreateResponse {
  Host host = 1;
  string token = 2;
  string refresh = 3;
}

message HostServiceGetRequest {
  string id = 1;
}

message HostServiceGetResponse {
  Host host = 1;
}

message HostServiceListRequest {
  optional string org_id = 1;
  // The number of items to be skipped over.
  uint64 offset = 2;
  // The number of items that will be returned. Together with offset, you can
  // use this to get pagination.
  uint64 limit = 3;
  // Search params.
  optional HostSearch search = 4;
  // The field sorting order of results.
  repeated HostSort sort = 5;
}

message HostSearch {
  // The way the search parameters should be combined.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search for the id of the host.
  optional string id = 2;
  // Search only for the name of the host.
  optional string name = 3;
  // Search only for the version of the host.
  optional string version = 4;
  // Search only for the operating system.
  optional string os = 5;
  // Search only for the ip address.
  optional string ip = 6;
}

message HostSort {
  HostSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum HostSortField {
  HOST_SORT_FIELD_UNSPECIFIED = 0;
  HOST_SORT_FIELD_HOST_NAME = 1;
  HOST_SORT_FIELD_CREATED_AT = 2;
  HOST_SORT_FIELD_VERSION = 3;
  HOST_SORT_FIELD_OS = 4;
  HOST_SORT_FIELD_OS_VERSION = 5;
  HOST_SORT_FIELD_CPU_COUNT = 6;
  HOST_SORT_FIELD_MEM_SIZE_BYTES = 7;
  HOST_SORT_FIELD_DISK_SIZE_BYTES = 8;
  HOST_SORT_FIELD_NODE_COUNT = 9;
}

message HostServiceListResponse {
  repeated Host hosts = 1;
  // The total number of hosts matching your query.
  uint64 host_count = 2;
}

message HostServiceUpdateRequest {
  string id = 1;
  optional string name = 2;
  optional string version = 3;
  optional string os = 5;
  optional string os_version = 6;
  // The region of the host.
  optional string region = 4;
  // Optionally set a billing amount for this host.
  optional blockjoy.common.v1.BillingAmount billing_amount = 7;
  // This is total disk space installed on host, given in bytes.
  optional uint64 total_disk_space = 8;
  // The entity that can make decisions on whether to run nodes on this host.
  optional ManagedBy managed_by = 9;
}

message HostServiceUpdateResponse {}

message HostServiceStartRequest {
  string id = 1;
}

message HostServiceStartResponse {}

message HostServiceStopRequest {
  string id = 1;
}

message HostServiceStopResponse {}

message HostServiceRestartRequest {
  string id = 1;
}

message HostServiceRestartResponse {}

message HostServiceDeleteRequest {
  string id = 1;
}

message HostServiceDeleteResponse {}

// Used to produce a list of regions that are available to deploy nodes to.
message HostServiceRegionsRequest {
  // The org for which to produce the list. This field is required for users
  // that are not administrators of the whole system.
  optional string org_id = 1;
  // The type of host to include in this list.
  optional HostType host_type = 2;
  // The id of the blockchain that should be ran inside the node.
  string blockchain_id = 3;
  // The version of the node software that is ran.
  string version = 4;
  // The type of node that you want to create.
  blockjoy.common.v1.NodeType node_type = 5;
}

message HostServiceRegionsResponse {
  repeated Region regions = 1;
}

message Region {
  optional string name = 1;
  // We currently have regions in the following pricing tiers:
  // NA1: North america
  // EU1: Europe
  // AP1: Asia-Pacific
  optional string pricing_tier = 2;
}

// The environment of host.
enum HostType {
  HOST_TYPE_UNSPECIFIED = 0;
  // This host is a host on the blockjoy cloud platform.
  HOST_TYPE_CLOUD = 1;
  // This host is a private host that can only be used by the org that owns it.
  HOST_TYPE_PRIVATE = 2;
}

message HostIpAddress {
  // The ip address as a string.
  string ip = 1;
  // Whether or not the ip address is currently in use by a node.
  bool assigned = 2;
}

// Used to indicate a change in the host status.
message HostStatus {
  string host_id = 1;
  optional HostConnectionStatus connection_status = 2;
}

// The connection status of a host.
enum HostConnectionStatus {
  HOST_CONNECTION_STATUS_UNSPECIFIED = 0;
  HOST_CONNECTION_STATUS_ONLINE = 1;
  HOST_CONNECTION_STATUS_OFFLINE = 2;
}

enum ManagedBy {
  MANAGED_BY_UNSPECIFIED = 0;
  MANAGED_BY_AUTOMATIC = 1;
  MANAGED_BY_MANUAL = 2;
}
