syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/resource.proto";
import "blockjoy/common/v1/search.proto";
import "blockjoy/common/v1/tag.proto";
import "google/protobuf/timestamp.proto";

message Host {
  // The id of the host.
  string host_id = 1;
  // The org id of a private host.
  optional string org_id = 2;
  // The org name of a private host.
  optional string org_name = 3;
  // The region of this host.
  optional string region = 4;
  // The network name of the host.
  string network_name = 5;
  // The display name of the host.
  optional string display_name = 6;
  // When to schedule nodes to this host.
  ScheduleType schedule_type = 7;
  // The operating system running on the host.
  string os = 8;
  // The version of the operating system running on the host.
  string os_version = 9;
  // The version of blockvisor running on the host.
  string bv_version = 10;
  // The IP address of this host
  string ip_address = 11;
  // The IP gateway for this host.
  string ip_gateway = 12;
  // IP addresses available to nodes running on this host.
  repeated HostIpAddress ip_addresses = 13;
  // The number of logical cores this host has.
  uint64 cpu_cores = 14;
  // The amount of memory this host has (in bytes).
  uint64 memory_bytes = 15;
  // The amount of disk space this host has (in bytes).
  uint64 disk_bytes = 16;
  // The number of nodes on this host.
  uint64 node_count = 17;
  // A list of tags attached to this host.
  blockjoy.common.v1.Tags tags = 18;
  // Who created this host.
  blockjoy.common.v1.Resource created_by = 19;
  // When this host was created.
  google.protobuf.Timestamp created_at = 20;
  // When this host was last updated.
  google.protobuf.Timestamp updated_at = 21;
}

// Service for managing hosts.
service HostService {
  // Create a single host.
  rpc Create(HostServiceCreateRequest) returns (HostServiceCreateResponse);
  // Get info for a single host.
  rpc Get(HostServiceGetRequest) returns (HostServiceGetResponse);
  // List all hosts matching some criteria.
  rpc List(HostServiceListRequest) returns (HostServiceListResponse);
  // Update a single host.
  rpc Update(HostServiceUpdateRequest) returns (HostServiceUpdateResponse);
  // Delete a single host.
  rpc Delete(HostServiceDeleteRequest) returns (HostServiceDeleteResponse);
  // Start a single host.
  rpc Start(HostServiceStartRequest) returns (HostServiceStartResponse);
  // Stop a single host.
  rpc Stop(HostServiceStopRequest) returns (HostServiceStopResponse);
  // Restart a single host.
  rpc Restart(HostServiceRestartRequest) returns (HostServiceRestartResponse);
  // Returns a list of regions where there are hosts available
  rpc Regions(HostServiceRegionsRequest) returns (HostServiceRegionsResponse);
}

message HostServiceCreateRequest {
  // An org-user's provisioning token to create this host.
  string provision_token = 1;
  // The org id for a private host.
  optional string org_id = 2;
  // The network name of the host.
  string network_name = 3;
  // The display name of the host.
  optional string display_name = 4;
  // The region of the host
  optional string region = 5;
  // When to schedule nodes to this host.
  ScheduleType schedule_type = 6;
  // The operating system this host is running.
  string os = 7;
  // The operating system version.
  string os_version = 8;
  // The blockvisor version running on the host.
  string bv_version = 9;
  // The ip address of this host.
  string ip_address = 10;
  // The ip gateway for this host.
  string ip_gateway = 11;
  // IP addresses available to nodes running on this host.
  repeated string ips = 12;
  // The number of logical cores on this host.
  uint64 cpu_cores = 13;
  // The amount of memory this host has (in bytes).
  uint64 memory_bytes = 14;
  // The amount of storage this host has (in bytes).
  uint64 disk_bytes = 15;
  // A list of tags attached to this host.
  blockjoy.common.v1.Tags tags = 16;
}

message HostServiceCreateResponse {
  Host host = 1;
  string token = 2;
  string refresh = 3;
}

message HostServiceGetRequest {
  string host_id = 1;
  optional string org_id = 2;
}

message HostServiceGetResponse {
  Host host = 1;
}

message HostServiceListRequest {
  // Only list private hosts with these org ids.
  repeated string org_ids = 1;
  // Only list hosts running these blockvisor versions.
  repeated string bv_versions = 2;
  // The number of results to skip.
  uint64 offset = 3;
  // Limit the number of results.
  uint64 limit = 4;
  // Search these parameters.
  optional HostSearch search = 5;
  // Sort the results in this order.
  repeated HostSort sort = 6;
}

message HostSearch {
  // How to combine the parameters.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search for this host id.
  optional string host_id = 2;
  // Search for this host name.
  optional string network_name = 3;
  // Search for this display name.
  optional string display_name = 4;
  // Search for this blockvisor version.
  optional string bv_version = 5;
  // Search for this operating system.
  optional string os = 6;
  // Search for this ip address.
  optional string ip = 7;
}

message HostSort {
  HostSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum HostSortField {
  HOST_SORT_FIELD_UNSPECIFIED = 0;
  HOST_SORT_FIELD_NETWORK_NAME = 1;
  HOST_SORT_FIELD_DISPLAY_NAME = 2;
  HOST_SORT_FIELD_OS = 3;
  HOST_SORT_FIELD_OS_VERSION = 4;
  HOST_SORT_FIELD_BV_VERSION = 5;
  HOST_SORT_FIELD_CPU_CORES = 6;
  HOST_SORT_FIELD_MEMORY_BYTES = 7;
  HOST_SORT_FIELD_DISK_BYTES = 8;
  HOST_SORT_FIELD_NODE_COUNT = 9;
  HOST_SORT_FIELD_CREATED_AT = 10;
  HOST_SORT_FIELD_UPDATED_AT = 11;
}

message HostServiceListResponse {
  repeated Host hosts = 1;
}

message HostServiceUpdateRequest {
  // The host id to update.
  string host_id = 1;
  // The org id for a private host.
  optional string org_id = 2;
  // Update the network name of the host.
  optional string network_name = 3;
  // Update the display name of the host.
  optional string display_name = 4;
  // Update the region of the host.
  optional string region = 5;
  // Update the OS running on the host.
  optional string os = 6;
  // Update the OS version running on the host.
  optional string os_version = 7;
  // Update the blockvisor version running on the host.
  optional string bv_version = 8;
  // Update the number of cpu cores on the host.
  optional uint64 cpu_cores = 9;
  // Update the amount of memory on the host.
  optional uint64 memory_bytes = 10;
  // Update the amount of disk space on the host.
  optional uint64 disk_bytes = 11;
  // When to schedule nodes to this host.
  optional ScheduleType schedule_type = 12;
  // Update the existing host tags.
  optional blockjoy.common.v1.UpdateTags update_tags = 13;
}

message HostServiceUpdateResponse {
  Host host = 1;
}

message HostServiceStartRequest {
  string host_id = 1;
  optional string org_id = 2;
}

message HostServiceStartResponse {}

message HostServiceStopRequest {
  string host_id = 1;
  optional string org_id = 2;
}

message HostServiceStopResponse {}

message HostServiceRestartRequest {
  string host_id = 1;
  optional string org_id = 2;
}

message HostServiceRestartResponse {}

message HostServiceDeleteRequest {
  string host_id = 1;
  optional string org_id = 2;
}

message HostServiceDeleteResponse {}

message HostServiceRegionsRequest {
  // The image to find hosts for.
  string image_id = 1;
  // The org id to include private hosts, images or protocols.
  optional string org_id = 2;
}

message HostServiceRegionsResponse {
  repeated Region regions = 1;
}

message Region {
  optional string name = 1;
  optional string pricing_tier = 2;
}

message HostIpAddress {
  // The ip address.
  string ip = 1;
  // Whether the ip address is in use by a node.
  bool assigned = 2;
}

// Used to indicate a change in the host status.
message HostStatus {
  string host_id = 1;
  optional HostConnectionStatus connection_status = 2;
}

// The connection status of a host.
enum HostConnectionStatus {
  HOST_CONNECTION_STATUS_UNSPECIFIED = 0;
  HOST_CONNECTION_STATUS_ONLINE = 1;
  HOST_CONNECTION_STATUS_OFFLINE = 2;
}

// When to schedule nodes to a host.
enum ScheduleType {
  SCHEDULE_TYPE_UNSPECIFIED = 0;
  SCHEDULE_TYPE_AUTOMATIC = 1;
  SCHEDULE_TYPE_MANUAL = 2;
}
