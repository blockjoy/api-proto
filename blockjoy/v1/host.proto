syntax = "proto3";

package blockjoy.v1;

import "blockjoy/common/v1/currency.proto";
import "blockjoy/common/v1/host.proto";
import "blockjoy/common/v1/resource.proto";
import "blockjoy/common/v1/search.proto";
import "blockjoy/common/v1/tag.proto";
import "google/protobuf/timestamp.proto";

message Host {
  // The id of the host.
  string host_id = 1;
  // The org id of a private host.
  optional string org_id = 2;
  // The org name of a private host.
  optional string org_name = 3;
  // The region of the host.
  Region region = 4;
  // The network name of the host.
  string network_name = 5;
  // The display name of the host.
  optional string display_name = 6;
  // When to schedule nodes to this host.
  blockjoy.common.v1.ScheduleType schedule_type = 7;
  // The operating system running on the host.
  string os = 8;
  // The version of the operating system running on the host.
  string os_version = 9;
  // The version of blockvisor running on the host.
  string bv_version = 10;
  // The IP address of this host
  string ip_address = 11;
  // The IP gateway for this host.
  string ip_gateway = 12;
  // IP addresses available to nodes running on this host.
  repeated blockjoy.common.v1.HostIpAddress ip_addresses = 13;
  // The number of logical cores this host has.
  uint64 cpu_cores = 14;
  // The amount of memory this host has (in bytes).
  uint64 memory_bytes = 15;
  // The amount of disk space this host has (in bytes).
  uint64 disk_bytes = 16;
  // The number of nodes on this host.
  uint64 node_count = 17;
  // A list of tags attached to this host.
  blockjoy.common.v1.Tags tags = 18;
  // Who created this host.
  blockjoy.common.v1.Resource created_by = 19;
  // When this host was created.
  google.protobuf.Timestamp created_at = 20;
  // When this host was last updated.
  google.protobuf.Timestamp updated_at = 21;
  // The cost of this host.
  optional blockjoy.common.v1.BillingAmount cost = 22;
}

message Region {
  // The id of this region.
  string region_id = 1;
  // The display name of this region.
  string name = 2;
  // The SKU code for this region.
  optional string sku_code = 3;
}

// Service for managing hosts.
service HostService {
  // Create a new host.
  rpc CreateHost(HostServiceCreateHostRequest) returns (HostServiceCreateHostResponse);
  // Create a new region.
  rpc CreateRegion(HostServiceCreateRegionRequest) returns (HostServiceCreateRegionResponse);
  // Get the info for a host.
  rpc GetHost(HostServiceGetHostRequest) returns (HostServiceGetHostResponse);
  // Get the info for a region.
  rpc GetRegion(HostServiceGetRegionRequest) returns (HostServiceGetRegionResponse);
  // List all hosts matching some criteria.
  rpc ListHosts(HostServiceListHostsRequest) returns (HostServiceListHostsResponse);
  // List the regions with available hosts.
  rpc ListRegions(HostServiceListRegionsRequest) returns (HostServiceListRegionsResponse);
  // Update an existing host.
  rpc UpdateHost(HostServiceUpdateHostRequest) returns (HostServiceUpdateHostResponse);
  // Delete an existing host.
  rpc DeleteHost(HostServiceDeleteHostRequest) returns (HostServiceDeleteHostResponse);
  // Start a host.
  rpc Start(HostServiceStartRequest) returns (HostServiceStartResponse);
  // Stop a host.
  rpc Stop(HostServiceStopRequest) returns (HostServiceStopResponse);
  // Restart a host.
  rpc Restart(HostServiceRestartRequest) returns (HostServiceRestartResponse);
}

message HostServiceCreateHostRequest {
  // An org-user's provisioning token to create this host.
  string provision_token = 1;
  // Whether this host is private to the provisioning org.
  bool is_private = 2;
  // The network name of the host.
  string network_name = 3;
  // The display name of the host.
  optional string display_name = 4;
  // The region id of the host.
  string region_id = 5;
  // When to schedule nodes to this host.
  blockjoy.common.v1.ScheduleType schedule_type = 6;
  // The operating system this host is running.
  string os = 7;
  // The operating system version.
  string os_version = 8;
  // The blockvisor version running on the host.
  string bv_version = 9;
  // The ip address of this host.
  string ip_address = 10;
  // The ip gateway for this host.
  string ip_gateway = 11;
  // IP addresses available to nodes running on this host.
  repeated string ips = 12;
  // The number of logical cores on this host.
  uint64 cpu_cores = 13;
  // The amount of memory this host has (in bytes).
  uint64 memory_bytes = 14;
  // The amount of storage this host has (in bytes).
  uint64 disk_bytes = 15;
  // A list of tags attached to this host.
  blockjoy.common.v1.Tags tags = 16;
}

message HostServiceCreateHostResponse {
  Host host = 1;
  string token = 2;
  string refresh = 3;
  string provision_org_id = 4;
}

message HostServiceCreateRegionRequest {
  string name = 1;
  optional string sku_code = 2;
}

message HostServiceCreateRegionResponse {
  Region region = 1;
}

message HostServiceGetHostRequest {
  string host_id = 1;
}

message HostServiceGetHostResponse {
  Host host = 1;
}

message HostServiceGetRegionRequest {
  string region_id = 1;
}

message HostServiceGetRegionResponse {
  Region region = 1;
}

message HostServiceListHostsRequest {
  // Only list private hosts with these org ids.
  repeated string org_ids = 1;
  // Only list hosts running these blockvisor versions.
  repeated string bv_versions = 2;
  // The number of results to skip.
  uint64 offset = 3;
  // Limit the number of results.
  uint64 limit = 4;
  // Search these parameters.
  optional HostSearch search = 5;
  // Sort the results in this order.
  repeated HostSort sort = 6;
}

message HostSearch {
  // How to combine the parameters.
  blockjoy.common.v1.SearchOperator operator = 1;
  // Search for this host id.
  optional string host_id = 2;
  // Search for this host name.
  optional string network_name = 3;
  // Search for this display name.
  optional string display_name = 4;
  // Search for this blockvisor version.
  optional string bv_version = 5;
  // Search for this operating system.
  optional string os = 6;
  // Search for this ip address.
  optional string ip = 7;
}

message HostSort {
  HostSortField field = 1;
  blockjoy.common.v1.SortOrder order = 2;
}

enum HostSortField {
  HOST_SORT_FIELD_UNSPECIFIED = 0;
  HOST_SORT_FIELD_NETWORK_NAME = 1;
  HOST_SORT_FIELD_DISPLAY_NAME = 2;
  HOST_SORT_FIELD_OS = 3;
  HOST_SORT_FIELD_OS_VERSION = 4;
  HOST_SORT_FIELD_BV_VERSION = 5;
  HOST_SORT_FIELD_CPU_CORES = 6;
  HOST_SORT_FIELD_MEMORY_BYTES = 7;
  HOST_SORT_FIELD_DISK_BYTES = 8;
  HOST_SORT_FIELD_NODE_COUNT = 9;
  HOST_SORT_FIELD_CREATED_AT = 10;
  HOST_SORT_FIELD_UPDATED_AT = 11;
}

message HostServiceListHostsResponse {
  repeated Host hosts = 1;
  uint64 total = 2;
}

message HostServiceListRegionsRequest {
  // The image to find hosts for.
  string image_id = 1;
  // The org id to include private hosts, images or protocols.
  optional string org_id = 2;
}

message HostServiceListRegionsResponse {
  repeated Region regions = 1;
}

message HostServiceUpdateHostRequest {
  // The host id to update.
  string host_id = 1;
  // Update the network name of the host.
  optional string network_name = 2;
  // Update the display name of the host.
  optional string display_name = 3;
  // Update the region of the host.
  optional string region_id = 4;
  // Update the OS running on the host.
  optional string os = 5;
  // Update the OS version running on the host.
  optional string os_version = 6;
  // Update the blockvisor version running on the host.
  optional string bv_version = 7;
  // Update the number of cpu cores on the host.
  optional uint64 cpu_cores = 8;
  // Update the amount of memory on the host.
  optional uint64 memory_bytes = 9;
  // Update the amount of disk space on the host.
  optional uint64 disk_bytes = 10;
  // When to schedule nodes to this host.
  optional blockjoy.common.v1.ScheduleType schedule_type = 11;
  // Update the existing host tags.
  optional blockjoy.common.v1.UpdateTags update_tags = 12;
  // The cost of this host.
  optional blockjoy.common.v1.BillingAmount cost = 13;
}

message HostServiceUpdateHostResponse {
  Host host = 1;
}

message HostServiceDeleteHostRequest {
  string host_id = 1;
}

message HostServiceDeleteHostResponse {}

message HostServiceStartRequest {
  string host_id = 1;
}

message HostServiceStartResponse {}

message HostServiceStopRequest {
  string host_id = 1;
}

message HostServiceStopResponse {}

message HostServiceRestartRequest {
  string host_id = 1;
}

message HostServiceRestartResponse {}
