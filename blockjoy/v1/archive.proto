syntax = "proto3";

package blockjoy.v1;

// Service to manage the archived data of different protocols.
service ArchiveService {
  // Get the download manifest metadata for some image.
  rpc GetDownloadMetadata(ArchiveServiceGetDownloadMetadataRequest) returns (ArchiveServiceGetDownloadMetadataResponse);
  // Get presigned download URLs for download manifest data chunks.
  rpc GetDownloadChunks(ArchiveServiceGetDownloadChunksRequest) returns (ArchiveServiceGetDownloadChunksResponse);
  // Get presigned upload URLs for archive data chunks.
  rpc GetUploadSlots(ArchiveServiceGetUploadSlotsRequest) returns (ArchiveServiceGetUploadSlotsResponse);
  // Put a new download manifest for retrieval with `GetDownloadManifest`.
  rpc PutDownloadManifest(ArchiveServicePutDownloadManifestRequest) returns (ArchiveServicePutDownloadManifestResponse);
}

message ArchiveServiceGetDownloadMetadataRequest {
  // An identifier to some property-set archive.
  string archive_id = 1;
  // Whether this is a public or private archive.
  optional string org_id = 2;
  // The data version (or latest if none).
  optional uint64 data_version = 3;
}

message ArchiveServiceGetDownloadMetadataResponse {
  // The data version of the download manifest.
  uint64 data_version = 1;
  // The total size (in bytes) of the uncompressed data.
  uint64 total_size = 2;
  // The chunk compression type.
  optional Compression compression = 3;
  // The total number of download manifest chunks.
  uint32 chunks = 4;
}

message ArchiveServiceGetDownloadChunksRequest {
  // An identifier to some property-set archive.
  string archive_id = 1;
  // Whether this is a public or private archive.
  optional string org_id = 2;
  // The data version for the download manifest.
  uint64 data_version = 3;
  // The set of chunk indexes to generate download URLs for.
  repeated uint32 chunk_indexes = 4;
}

message ArchiveServiceGetDownloadChunksResponse {
  // Presigned URLs for the requested download manifest chunk indexes.
  repeated ArchiveChunk chunks = 1;
}

message ArchiveServiceGetUploadSlotsRequest {
  // An identifier to some property-set archive.
  string archive_id = 1;
  // Whether this is a public or private archive.
  optional string org_id = 2;
  // The data version. If not set, will increment the last data version.
  optional uint64 data_version = 3;
  // Expiry duration of an upload URL (in seconds).
  optional uint32 url_expires = 4;
  // The requested data slot indexes to generate upload URLs for.
  repeated uint32 slot_indexes = 5;
}

message ArchiveServiceGetUploadSlotsResponse {
  // The data version of the upload slots.
  uint64 data_version = 1;
  // A list of slots for uploading archive chunks.
  repeated UploadSlot slots = 2;
}

// An upload slot for a chunk of data.
message UploadSlot {
  // The index of this upload slot.
  uint32 index = 1;
  // The persistent key to an archive chunk.
  string key = 2;
  // A temporary, pre-signed upload url for the data.
  string url = 3;
}

message ArchiveServicePutDownloadManifestRequest {
  // An identifier to some property-set archive.
  string archive_id = 1;
  // Whether this is a public or private archive.
  optional string org_id = 2;
  // The data version to save.
  uint64 data_version = 3;
  // The total size (in bytes) of the uncompressed data.
  uint64 total_size = 4;
  // The chunk compression type.
  optional Compression compression = 5;
  // Metadata for each archive data chunk.
  repeated ArchiveChunk chunks = 6;
}

message ArchiveServicePutDownloadManifestResponse {}

// Metadata describing an archive chunk URL and file mapping.
message ArchiveChunk {
  // The index of this archive chunk.
  uint32 index = 1;
  // The persistent chunk key.
  string key = 2;
  // A temporary pre-signed download url (or none for a blueprint).
  optional string url = 3;
  // The checksum of the chunk data.
  Checksum checksum = 4;
  // The chunk data size (in bytes).
  uint64 size = 5;
  // Mappings from chunks to file paths.
  repeated ChunkTarget destinations = 6;
}

// The target file for a decompressed data chunk.
message ChunkTarget {
  // The relative file path.
  string path = 1;
  // The start position of the data bytes in the target file.
  uint64 position_bytes = 2;
  // The size of the uncompressed chunk data.
  uint64 size_bytes = 3;
}

// A checksum consisting of a type and value.
message Checksum {
  oneof checksum {
    bytes sha1 = 1;
    bytes sha256 = 2;
    bytes blake3 = 3;
  }
}

// Type of compression used on chunk data.
message Compression {
  oneof compression {
    // ZStandard compression, where the value is the compression level.
    int32 zstd = 1;
  }
}
