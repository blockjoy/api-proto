syntax = "proto3";

package blockjoy.v1;

import "google/protobuf/timestamp.proto";

// API key service functionality.
service ApiKeyService {
  rpc Create(CreateApiKeyRequest) returns (CreateApiKeyResponse);
  rpc List(ListApiKeyRequest) returns (ListApiKeyResponse);
  rpc Update(UpdateApiKeyRequest) returns (UpdateApiKeyResponse);
  rpc Regenerate(RegenerateApiKeyRequest) returns (RegenerateApiKeyResponse);
  rpc Delete(DeleteApiKeyRequest) returns (DeleteApiKeyResponse);
}

message CreateApiKeyRequest {
  // The (non-unique) label for this api key.
  string label = 1;
  // The scope of the api key.
  ApiKeyScope scope = 2;
}

message CreateApiKeyResponse {
  // The bearer secret representation of the api key.
  optional string api_key = 1;
  // The time this api key was created.
  google.protobuf.Timestamp created_at = 2;
}

message ListApiKeyRequest {
}

message ListApiKeyResponse {
  // A list of the api keys.
  repeated ListApiKey api_keys = 1;
}

message ListApiKey {
  // The unique identifier to this api key.
  optional string id = 1;
  // The (non-unique) label for this api key.
  optional string label = 2;
  // The scope of this api key.
  ApiKeyScope scope = 3;
  // The time this api key was created.
  google.protobuf.Timestamp created_at = 4;
  // The last time this api key was updated.
  google.protobuf.Timestamp updated_at = 5;
}

message UpdateApiKeyRequest {
  // The unique identifier to the api key to update.
  string id = 1;
  // The (non-unique) new label for this api key.
  optional string label = 2;
  // The new scope of this api key.
  ApiKeyScope scope = 3;
}

message UpdateApiKeyResponse {
  // The time the api key was updated.
  google.protobuf.Timestamp updated_at = 1;
}

message RegenerateApiKeyRequest {
  // The unique identifier to the api key to regenerate.
  string id = 1;
}

message RegenerateApiKeyResponse {
  // The new bearer secret representation for this api key.
  optional string api_key = 1;
  // The time the api key was updated.
  google.protobuf.Timestamp updated_at = 2;
}

message DeleteApiKeyRequest {
  // The unique identifier to the api key to delete.
  string id = 1;
}

message DeleteApiKeyResponse {
}

message ApiKeyScope {
  // The resource scope of this api key.
  ApiResource resource = 1;
  // The resource identifier of this api key.
  optional string resource_id = 2;
}

enum ApiResource {
  API_RESOURCE_UNSPECIFIED = 0;
  API_RESOURCE_USER = 1;
  API_RESOURCE_ORG = 2;
  API_RESOURCE_NODE = 3;
  API_RESOURCE_HOST = 4;
}
